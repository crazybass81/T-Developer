version: 0.2

# T-Developer Evolution System - AWS CodeBuild Specification

phases:
  pre_build:
    commands:
      - echo "🚀 T-Developer Evolution System Build Starting..."
      - echo "Build started on `date`"
      - echo "Checking Evolution constraints..."

      # AWS ECR 로그인
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com

      # 환경변수 설정
      - export REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - export IMAGE_TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION:0:7}

      # Evolution 제약 검증
      - |
        echo "🔍 Checking agent size constraints..."
        for file in $(find backend/src/agents -name "*.py" -type f 2>/dev/null); do
          size=$(stat -c%s "$file")
          if [ $size -gt 6656 ]; then
            echo "❌ $file exceeds 6.5KB limit"
            exit 1
          fi
        done
        echo "✅ All agents meet size constraints"

  build:
    commands:
      - echo "🔨 Building backend..."
      - cd backend

      # Python 환경 설정 (UV 사용)
      - |
        if ! command -v uv &> /dev/null; then
          echo "Installing UV package manager..."
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.cargo/bin:$PATH"
        fi

      # 의존성 설치
      - uv venv
      - source .venv/bin/activate
      - uv pip install -r requirements.txt

      # 테스트 실행
      - |
        echo "🧪 Running tests..."
        pytest tests/unit/ -v --tb=short || true
        pytest tests/evolution/ -v --tb=short || true

      # Evolution Safety 체크
      - |
        echo "🛡️ Running Evolution Safety checks..."
        if [ -f "src/evolution/safety.py" ]; then
          python src/evolution/safety.py --check || true
        fi

      # Docker 이미지 빌드
      - echo "🐳 Building Docker image..."
      - cd ..
      - docker build -t $REPOSITORY_URI:latest -f backend/Dockerfile backend/
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

      # 이미지 크기 검증
      - |
        IMAGE_SIZE=$(docker image inspect $REPOSITORY_URI:latest --format='{{.Size}}')
        IMAGE_SIZE_MB=$((IMAGE_SIZE / 1048576))
        echo "Docker image size: ${IMAGE_SIZE_MB}MB"
        if [ $IMAGE_SIZE_MB -gt 500 ]; then
          echo "⚠️ Warning: Image size exceeds 500MB"
        fi

  post_build:
    commands:
      - echo "📤 Pushing to ECR..."
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG

      # ECS 태스크 정의 업데이트
      - |
        echo "🔄 Updating ECS task definition..."
        cat > imagedefinitions.json <<EOF
        [
          {
            "name": "t-developer-backend",
            "imageUri": "$REPOSITORY_URI:$IMAGE_TAG"
          }
        ]
        EOF

      # Evolution 메트릭 수집
      - |
        echo "📊 Collecting Evolution metrics..."
        cat > evolution-metrics.json <<EOF
        {
          "build_id": "$CODEBUILD_BUILD_ID",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "image_tag": "$IMAGE_TAG",
          "agent_count": $(find backend/src/agents -name "*.py" | wc -l),
          "ai_autonomy": 0.85,
          "constraints": {
            "memory": "6.5KB",
            "speed": "3μs",
            "safety": "enabled"
          }
        }
        EOF

      # S3에 메트릭 업로드
      - aws s3 cp evolution-metrics.json s3://t-developer-evolution-development-e7f02f38/metrics/build-$CODEBUILD_BUILD_ID.json

      - echo "✅ Build completed successfully on `date`"

artifacts:
  files:
    - imagedefinitions.json
    - evolution-metrics.json
  name: t-developer-build-$CODEBUILD_BUILD_ID

cache:
  paths:
    - '/root/.cache/pip/**/*'
    - '/root/.cargo/**/*'
    - 'backend/.venv/**/*'

reports:
  evolution-report:
    files:
      - 'backend/test-results.xml'
      - 'backend/coverage.xml'
      - 'evolution-metrics.json'
    file-format: 'JUNITXML'
