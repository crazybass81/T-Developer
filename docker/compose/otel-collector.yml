# OpenTelemetry Collector Docker Compose
# Day 5: Monitoring & Logging Infrastructure
# Generated: 2024-11-18

version: '3.8'

services:
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: t-developer-otel-collector
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ../../config/otel-collector.yaml:/etc/otel-collector-config.yaml:ro
      - /var/log/evolution:/var/log/evolution:ro
      - /var/log/agents:/var/log/agents:ro
      - /var/log/safety:/var/log/safety:ro
    ports:
      # OTLP gRPC receiver
      - "4317:4317"
      # OTLP HTTP receiver
      - "4318:4318"
      # Health check
      - "13133:13133"
      # Prometheus metrics
      - "9090:9090"
      # Collector metrics
      - "8888:8888"
      # pprof
      - "1777:1777"
      # zPages
      - "55679:55679"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - VERSION=${VERSION:-1.0.0}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
    networks:
      - evolution-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.t-developer.component=monitoring"
      - "com.t-developer.day=5"
      - "com.t-developer.critical=true"

  # Jaeger for trace visualization (development only)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: t-developer-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - evolution-network
    profiles:
      - development
    labels:
      - "com.t-developer.component=tracing"
      - "com.t-developer.environment=development"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: t-developer-grafana
    restart: unless-stopped
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-evolution}
      - GF_INSTALL_PLUGINS=cloudwatch,xray
    volumes:
      - grafana-data:/var/lib/grafana
      - ../../config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../../config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - evolution-network
    depends_on:
      - otel-collector
    labels:
      - "com.t-developer.component=visualization"
      - "com.t-developer.day=5"

  # Prometheus for metrics storage (local development)
  prometheus:
    image: prom/prometheus:latest
    container_name: t-developer-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ../../config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - evolution-network
    profiles:
      - development
    labels:
      - "com.t-developer.component=metrics"
      - "com.t-developer.environment=development"

networks:
  evolution-network:
    driver: bridge
    name: t-developer-evolution-network

volumes:
  grafana-data:
    name: t-developer-grafana-data
  prometheus-data:
    name: t-developer-prometheus-data
