{
  "permissions": {
    "allow": [
      "Bash(chmod:*)",
      "Bash(npm install:*)",
      "Bash(rm:*)",
      "Bash(npm run dev:*)",
      "Bash(npx prisma generate:*)",
      "Bash(npm run build:*)",
      "Bash(timeout 10s npm run dev:simple)",
      "Bash(curl:*)",
      "Bash(mkdir:*)",
      "Bash(docker-compose:*)",
      "Bash(cat:*)",
      "Bash(lsof:*)",
      "Bash(./test-integration.sh:*)",
      "Bash(export BEDROCK_AGENT_ID=NYZHMLSDOJ)",
      "Bash(export BEDROCK_AGENT_ALIAS_ID=IBQK7SYNGG)",
      "Bash(aws sts get-caller-identity:*)",
      "Bash(aws bedrock-agent get-agent:*)",
      "Bash(node:*)",
      "Bash(./test-complete-squad.sh:*)",
      "Bash(npm search:*)",
      "Bash(npx ts-node:*)",
      "Bash(/home/ec2-user/T-DeveloperMVP/test-agno-api.sh:*)",
      "Bash(/home/ec2-user/T-DeveloperMVP/demo-complete-integration.sh:*)",
      "mcp__ide__getDiagnostics",
      "Bash(kill:*)",
      "Bash(pkill:*)",
      "Bash(npx next dev:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm run lint)",
      "Bash(git push:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(find:*)",
      "Bash(git filter-branch:*)",
      "Bash(git stash:*)",
      "Bash(npm cache clean:*)",
      "Bash(lsblk:*)",
      "Bash(sudo growpart:*)",
      "Bash(sudo:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(git restore:*)",
      "Bash(aws secretsmanager list-secrets:*)",
      "Bash(timeout 10s npm run dev)",
      "Bash(./scripts/aws/setup-parameters.sh:*)",
      "Bash(./scripts/aws/setup-secrets.sh:*)",
      "Bash(grep:*)",
      "Bash(./scripts/aws/update-ai-keys.sh:*)",
      "Bash(./scripts/aws/add-missing-parameters.sh:*)",
      "Bash(cp:*)",
      "Bash(gh run list:*)",
      "Bash(npm uninstall 2)",
      "Bash(touch:*)",
      "Bash(journalctl:*)",
      "Bash(NODE_ENV=development npx ts-node src/main.ts)",
      "Bash(timeout 10s NODE_ENV=development npx ts-node src/main.ts)",
      "Bash(timeout:*)",
      "Bash(time curl:*)",
      "Bash(unzip:*)",
      "Bash(npx tsc:*)",
      "Bash(NODE_ENV=development timeout 5s npx ts-node src/main.ts)",
      "Bash(python -m pytest tests/test_nl_input_agent.py -v --tb=short)",
      "Bash(python3 -m pytest tests/test_nl_input_agent.py -v --tb=short)",
      "Bash(uv:*)",
      "Bash(uv pip:*)",
      "Bash(uv pip install:*)",
      "Bash(uv pip sync:*)",
      "Bash(uv venv:*)",
      "Bash(uv add:*)",
      "Bash(uv remove:*)",
      "Bash(uv run:*)",
      "Bash(./deploy-local.sh:*)",
      "Bash(docker system prune:*)",
      "Bash(docker stop:*)",
      "Bash(docker rm:*)",
      "Bash(docker logs:*)",
      "Bash(/home/ec2-user/test-iam-role.sh:*)",
      "Bash(python3:*)",
      "Bash(/home/ec2-user/T-DeveloperMVP/backend/setup-aws-env.sh:*)",
      "Bash(source:*)",
      "Bash(sam:*)",
      "Bash(export SAM_CLI_TELEMETRY=0)",
      "Bash(aws ec2 describe-vpcs:*)",
      "Bash(aws ec2 describe-subnets:*)",
      "Bash(aws ec2 describe-security-groups:*)",
      "Bash(--stack-name t-developer-lambda-stack-dev )",
      "Bash(--capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM )",
      "Bash(--parameter-overrides )",
      "Bash(Environment=development )",
      "Bash(VpcId=vpc-021655951c69fab62 )",
      "Bash(SubnetIds=subnet-08f9b59af0539c3e5,subnet-0307ae6aaa9f8ffde )",
      "Bash(SecurityGroupId=sg-0746354ce6a362496 )",
      "Bash(--no-confirm-changeset )",
      "Bash(--no-fail-on-empty-changeset)",
      "Bash(aws cloudformation describe-stacks:*)",
      "Bash(aws cloudformation describe-stack-events:*)",
      "Bash(aws cloudformation wait:*)",
      "Bash(true)",
      "Bash(aws cloudformation delete-stack:*)",
      "Bash(aws cloudformation list-stacks:*)",
      "Bash(--stack-name t-developer-lambda-stack-dev )",
      "Bash(--s3-bucket aws-sam-cli-managed-default-samclisourcebucket-ivvzisxldr56 )",
      "Bash(--capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM )",
      "Bash(--parameter-overrides )",
      "Bash(Environment=development )",
      "Bash(VpcId=vpc-021655951c69fab62 )",
      "Bash(SubnetIds=subnet-08f9b59af0539c3e5,subnet-0307ae6aaa9f8ffde )",
      "Bash(SecurityGroupId=sg-0746354ce6a362496 )",
      "Bash(--no-confirm-changeset )",
      "Bash(--stack-name t-developer-lambda-stack-dev )",
      "Bash(--resolve-s3 )",
      "Bash(--capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM )",
      "Bash(--parameter-overrides )",
      "Bash(Environment=development )",
      "Bash(VpcId=vpc-021655951c69fab62 )",
      "Bash(SubnetIds=subnet-08f9b59af0539c3e5,subnet-0307ae6aaa9f8ffde )",
      "Bash(SecurityGroupId=sg-0746354ce6a362496 )",
      "Bash(--no-confirm-changeset )",
      "Bash(aws cloudformation:*)",
      "Bash(--stack-name t-developer-lambda-v2 )",
      "Bash(--resolve-s3 )",
      "Bash(--capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM )",
      "Bash(--parameter-overrides )",
      "Bash(Environment=development )",
      "Bash(VpcId=vpc-021655951c69fab62 )",
      "Bash(SubnetIds=subnet-08f9b59af0539c3e5,subnet-0307ae6aaa9f8ffde )",
      "Bash(SecurityGroupId=sg-0746354ce6a362496 )",
      "Bash(--no-confirm-changeset )",
      "Bash(aws iam list-roles:*)",
      "Bash(--stack-name t-developer-lambda-prod )",
      "Bash(--resolve-s3 )",
      "Bash(--capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM )",
      "Bash(--parameter-overrides )",
      "Bash(Environment=development )",
      "Bash(VpcId=vpc-021655951c69fab62 )",
      "Bash(SubnetIds=subnet-08f9b59af0539c3e5,subnet-0307ae6aaa9f8ffde )",
      "Bash(SecurityGroupId=sg-0746354ce6a362496 )",
      "Bash(--no-confirm-changeset )",
      "Bash(npm start)",
      "Bash(npm run start:all:*)",
      "Bash(infrastructure/aws/deploy-basic.sh:*)",
      "Bash(infrastructure/aws/deploy-s3-only.sh:*)",
      "Bash(mv:*)",
      "Bash(config_schema.py dependency_manager.py deployment_scaling.py )",
      "Bash(initialization.py lifecycle_events.py parallel_coordinator.py )",
      "Bash(state_store.py sync_async_layer.py termination.py )",
      "Bash(version_manager.py workflow_engine.py extras/)",
      "Bash(docker system:*)",
      "Bash(docker build:*)",
      "Bash(npx create-next-app:*)",
      "Bash(check_rules_after_command)",
      "Bash(rules)",
      "Bash(git rm:*)",
      "Bash(PORT=3000 npm run dev)",
      "Bash(python -m pytest tests/test_simple.py::TestMockingAndPatching::test_patch_decorator -xvs)",
      "Bash(for agent in ui_selection parser component_decision match_rate search generation assembly download)",
      "Bash(do)",
      "Bash(echo:*)",
      "Bash(if ! grep -q \"_custom_initialize\" /home/ec2-user/T-DeveloperMVP/backend/src/agents/ecs-integrated/$agent/main.py)",
      "Bash(then)",
      "Bash(fi)",
      "Bash(done)",
      "Bash(PORT=3000 npx next dev --port 3000 --hostname 0.0.0.0)",
      "Bash(aws ssm get-parameter:*)",
      "Bash(aws ssm put-parameter:*)",
      "Bash(ENVIRONMENT=development python3 src/config/env_loader.py)",
      "Bash(export ENVIRONMENT=development)",
      "Bash(pre-commit:*)",
      "Bash(git config:*)",
      "Bash(python test:*)",
      "Bash(PYTHONPATH=/home/ec2-user/T-DeveloperMVP/backend python3 src/main_api.py)",
      "Bash(export PYTHONPATH=/home/ec2-user/T-DeveloperMVP/backend)",
      "Bash(PYTHONPATH=. python3 src/main_api.py)",
      "Bash(sed:*)",
      "Bash(PYTHONPATH=/home/ec2-user/T-DeveloperMVP/backend uvicorn src.main_api:app --reload --host 0.0.0.0 --port 8000)",
      "Bash(PYTHONPATH=/home/ec2-user/T-DeveloperMVP/backend python -m uvicorn src.main_api:app --reload --host 0.0.0.0 --port 8000)",
      "Bash(PYTHONPATH=/home/ec2-user/T-DeveloperMVP/backend python3 -m uvicorn src.main_api:app --reload --host 0.0.0.0 --port 8000)",
      "Bash(uv pip install:*)",
      "Bash(for dir in nl_input ui_selection parser component_decision match_rate search generation assembly download)",
      "Bash(do echo \"=== $dir ===\")",
      "Bash(test:*)",
      "Bash(PYTHONPATH=/home/ec2-user/T-DeveloperMVP/backend timeout 10s python3 -m uvicorn src.main_api:app --reload --host 0.0.0.0 --port 8000)",
      "Bash(sqlite3:*)",
      "Bash(PORT=3001 npm start)",
      "Bash(git checkout:*)",
      "Bash(python -m pytest tests/test_ai_capability_analyzer.py -v --tb=short)",
      "Bash(tree:*)",
      "Bash(python -m pytest tests/evolution/test_engine.py::TestEvolutionEngine::test_engine_initialization -v)",
      "Bash(python -m pytest tests/evolution/test_engine.py::TestEvolutionEngine::test_memory_constraint_validation -v)",
      "Bash(python -m pytest tests/evolution/test_safety.py::TestEvolutionSafety::test_infinite_loop_detection -v)",
      "Bash(python -m pytest tests/evolution/test_registry.py::TestAgentRegistry::test_agent_creation -v)",
      "Bash(python -m pytest tests/evolution/ -v --tb=short)",
      "Bash(python -m pytest tests/evolution/test_engine.py::TestEvolutionEngine::test_crossover_operation tests/evolution/test_safety.py::TestEvolutionSafety::test_pattern_extraction tests/evolution/test_registry.py::TestAgentRegistry::test_persistence -v)",
      "Bash(python:*)"
    ],
    "deny": []
  }
}
