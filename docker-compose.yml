version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile  # Use Dockerfile.production for production
    container_name: t-developer-backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - AWS_REGION=us-east-1
      - DYNAMODB_ENDPOINT=http://dynamodb:8000
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - dynamodb
      - redis
    volumes:
      - "./backend:/app"
    networks:
      - t-developer-network

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    container_name: t-developer-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - backend
    volumes:
      - "./frontend:/app"
    networks:
      - t-developer-network

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: t-developer-postgres
    environment:
      POSTGRES_DB: tdeveloper
      POSTGRES_USER: tdeveloper
      POSTGRES_PASSWORD: tdeveloper123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tdeveloper -d tdeveloper"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - t-developer-network

  # DynamoDB Local
  dynamodb:
    image: amazon/dynamodb-local:latest
    container_name: t-developer-dynamodb
    ports:
      - "8001:8000"  # Changed port to avoid conflict with backend
    command: "-jar DynamoDBLocal.jar -sharedDb -inMemory"
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
    networks:
      - t-developer-network

  # DynamoDB Admin
  dynamodb-admin:
    image: aaronshaf/dynamodb-admin
    container_name: t-developer-dynamodb-admin
    ports:
      - "8002:8001"
    environment:
      DYNAMO_ENDPOINT: "http://dynamodb:8000"
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: "local"
      AWS_SECRET_ACCESS_KEY: "local"
    depends_on:
      - dynamodb
    networks:
      - t-developer-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: t-developer-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-devpassword}
    volumes:
      - redis-data:/data
    networks:
      - t-developer-network

  # Redis Commander (Redis UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: t-developer-redis-ui
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: "local:redis:6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD:-devpassword}
    depends_on:
      - redis
    networks:
      - t-developer-network

  # LocalStack (AWS 서비스 모킹)
  localstack:
    image: localstack/localstack:latest
    container_name: t-developer-localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,lambda,secretsmanager,cloudwatch
      - DEBUG=1
      - LAMBDA_EXECUTOR=docker
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - localstack-data:/tmp/localstack
    networks:
      - t-developer-network

  # Elasticsearch (컴포넌트 검색용)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: t-developer-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - t-developer-network

volumes:
  postgres_data:
  redis-data:
  localstack-data:
  elasticsearch-data:

networks:
  t-developer-network:
    driver: bridge