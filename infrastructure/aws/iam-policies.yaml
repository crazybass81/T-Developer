AWSTemplateFormatVersion: '2010-09-09'
Description: 'T-Developer IAM roles and policies for 9-agent pipeline'

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
    Description: Deployment environment

Resources:
  # Lambda Execution Role for Agents
  AgentExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 't-developer-agent-execution-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: AgentPipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # DynamoDB permissions
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/t-developer-*'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/t-developer-*/index/*'

              # S3 permissions
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::t-developer-${Environment}-*'
                  - !Sub 'arn:aws:s3:::t-developer-${Environment}-*/*'

              # Bedrock permissions
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetFoundationModel
                  - bedrock:ListFoundationModels
                Resource: '*'

              # Agent Suite permissions
              - Effect: Allow
                Action:
                  - bedrock-agent:InvokeAgent
                  - bedrock-agent:CreateAgentSession
                  - bedrock-agent:GetAgent
                  - bedrock-agent:ListAgents
                Resource: '*'

              # EventBridge permissions
              - Effect: Allow
                Action:
                  - events:PutEvents
                  - events:DescribeRule
                Resource:
                  - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/t-developer-*'
                  - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/t-developer-*'

              # SQS permissions
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:t-developer-*'

              # CloudWatch permissions
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'

              # Secrets Manager permissions
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:t-developer/*'

              # Systems Manager Parameter Store
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/t-developer/*'

  # API Gateway Execution Role
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 't-developer-api-gateway-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayLambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:t-developer-*'

  # ECS Task Role for containerized agents
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 't-developer-ecs-task-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSTaskPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Same permissions as Lambda execution role
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/t-developer-*'
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub 'arn:aws:s3:::t-developer-${Environment}-*'
                  - !Sub 'arn:aws:s3:::t-developer-${Environment}-*/*'
              - Effect: Allow
                Action:
                  - bedrock:*
                  - bedrock-agent:*
                Resource: '*'

  # Developer Role for local development
  DeveloperRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 't-developer-dev-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'sts:ExternalId': 't-developer-dev-access'
      Policies:
        - PolicyName: DeveloperPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - s3:*
                  - bedrock:*
                  - bedrock-agent:*
                  - lambda:*
                  - ecs:*
                  - events:*
                  - sqs:*
                  - cloudwatch:*
                  - logs:*
                Resource: '*'

Outputs:
  AgentExecutionRoleArn:
    Description: 'ARN of the Agent Execution Role'
    Value: !GetAtt AgentExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-agent-execution-role'

  ApiGatewayRoleArn:
    Description: 'ARN of the API Gateway Role'
    Value: !GetAtt ApiGatewayRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-api-gateway-role'

  ECSTaskRoleArn:
    Description: 'ARN of the ECS Task Role'
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ecs-task-role'

  DeveloperRoleArn:
    Description: 'ARN of the Developer Role'
    Value: !GetAtt DeveloperRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-developer-role'
