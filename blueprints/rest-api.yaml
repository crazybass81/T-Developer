# REST API Service Blueprint
# Phase 5: P5-T2 - Blueprint Agent

name: rest-api
description: RESTful API service with CRUD operations
version: 1.0.0

variables:
  service_name:
    type: string
    description: Name of the service
    required: true

  database_type:
    type: string
    description: Type of database (postgres, mysql, mongodb)
    default: postgres

  auth_enabled:
    type: boolean
    description: Enable authentication
    default: true

  port:
    type: integer
    description: Service port
    default: 3000

structure:
  directories:
    - src
    - src/controllers
    - src/models
    - src/routes
    - src/middleware
    - src/services
    - src/utils
    - tests
    - tests/unit
    - tests/integration
    - config
    - scripts
    - docs

files:
  - path: package.json
    template: |
      {
        "name": "{{ service_name }}",
        "version": "1.0.0",
        "description": "{{ service_name }} REST API",
        "main": "src/index.js",
        "scripts": {
          "start": "node src/index.js",
          "dev": "nodemon src/index.js",
          "test": "jest",
          "lint": "eslint src/"
        },
        "dependencies": {
          "express": "^4.18.0",
          "cors": "^2.8.5",
          "helmet": "^7.0.0",
          "dotenv": "^16.0.0"{% if auth_enabled %},
          "jsonwebtoken": "^9.0.0",
          "bcrypt": "^5.1.0"{% endif %}{% if database_type == "postgres" %},
          "pg": "^8.11.0",
          "sequelize": "^6.32.0"{% endif %}{% if database_type == "mongodb" %},
          "mongoose": "^7.3.0"{% endif %}
        },
        "devDependencies": {
          "jest": "^29.5.0",
          "nodemon": "^2.0.22",
          "eslint": "^8.42.0"
        }
      }

  - path: src/index.js
    template: |
      const express = require('express');
      const cors = require('cors');
      const helmet = require('helmet');
      require('dotenv').config();

      const app = express();
      const PORT = process.env.PORT || {{ port }};

      // Middleware
      app.use(helmet());
      app.use(cors());
      app.use(express.json());

      // Routes
      app.get('/health', (req, res) => {
        res.json({ status: 'healthy', service: '{{ service_name }}' });
      });

      // Error handling
      app.use((err, req, res, next) => {
        console.error(err.stack);
        res.status(500).json({ error: 'Internal server error' });
      });

      app.listen(PORT, () => {
        console.log(`{{ service_name }} running on port ${PORT}`);
      });

  - path: .env.example
    template: |
      PORT={{ port }}
      NODE_ENV=development
      {% if database_type == "postgres" %}
      DATABASE_URL=postgresql://user:password@localhost:5432/{{ service_name }}
      {% elif database_type == "mongodb" %}
      MONGODB_URI=mongodb://localhost:27017/{{ service_name }}
      {% endif %}
      {% if auth_enabled %}
      JWT_SECRET=your-secret-key-here
      JWT_EXPIRY=24h
      {% endif %}

  - path: Dockerfile
    template: |
      FROM node:18-alpine

      WORKDIR /app

      COPY package*.json ./
      RUN npm ci --only=production

      COPY . .

      EXPOSE {{ port }}

      CMD ["node", "src/index.js"]

  - path: docker-compose.yml
    template: |
      version: '3.8'

      services:
        app:
          build: .
          ports:
            - "{{ port }}:{{ port }}"
          environment:
            - NODE_ENV=production
          {% if database_type == "postgres" %}
          depends_on:
            - postgres

        postgres:
          image: postgres:15
          environment:
            POSTGRES_DB: {{ service_name }}
            POSTGRES_USER: user
            POSTGRES_PASSWORD: password
          volumes:
            - postgres_data:/var/lib/postgresql/data

      volumes:
        postgres_data:
      {% elif database_type == "mongodb" %}
          depends_on:
            - mongodb

        mongodb:
          image: mongo:6
          volumes:
            - mongo_data:/data/db

      volumes:
        mongo_data:
      {% endif %}

ci_cd:
  github_actions:
    - name: CI/CD Pipeline
      path: .github/workflows/ci.yml
      template: |
        name: CI/CD Pipeline

        on:
          push:
            branches: [main, develop]
          pull_request:
            branches: [main]

        jobs:
          test:
            runs-on: ubuntu-latest

            steps:
              - uses: actions/checkout@v3

              - name: Setup Node.js
                uses: actions/setup-node@v3
                with:
                  node-version: '18'
                  cache: 'npm'

              - name: Install dependencies
                run: npm ci

              - name: Run tests
                run: npm test

              - name: Run linter
                run: npm run lint

          build:
            needs: test
            runs-on: ubuntu-latest
            if: github.ref == 'refs/heads/main'

            steps:
              - uses: actions/checkout@v3

              - name: Build Docker image
                run: docker build -t {{ service_name }}:${{ github.sha }} .

              - name: Push to registry
                run: echo "Push to registry here"

deployment:
  kubernetes:
    - name: Deployment
      path: k8s/deployment.yaml
      template: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: {{ service_name }}
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: {{ service_name }}
          template:
            metadata:
              labels:
                app: {{ service_name }}
            spec:
              containers:
              - name: {{ service_name }}
                image: {{ service_name }}:latest
                ports:
                - containerPort: {{ port }}
                env:
                - name: NODE_ENV
                  value: production
