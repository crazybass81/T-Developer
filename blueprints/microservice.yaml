# Microservice Blueprint
# Phase 5: P5-T2 - Blueprint Agent

name: microservice
description: Event-driven microservice with message queue
version: 1.0.0

variables:
  service_name:
    type: string
    description: Name of the microservice
    required: true

  message_broker:
    type: string
    description: Message broker type (rabbitmq, kafka, redis)
    default: rabbitmq

  language:
    type: string
    description: Programming language (python, node, go)
    default: python

structure:
  directories:
    - src
    - src/handlers
    - src/models
    - src/services
    - src/utils
    - tests
    - config
    - scripts

files:
  - path: requirements.txt
    condition: language == "python"
    template: |
      fastapi==0.104.0
      uvicorn==0.24.0
      pydantic==2.4.0
      {% if message_broker == "rabbitmq" %}
      pika==1.3.2
      {% elif message_broker == "kafka" %}
      kafka-python==2.0.2
      {% elif message_broker == "redis" %}
      redis==5.0.0
      {% endif %}
      pytest==7.4.0
      pytest-asyncio==0.21.0

  - path: src/main.py
    condition: language == "python"
    template: |
      """{{ service_name }} Microservice"""

      import asyncio
      import os
      from fastapi import FastAPI
      from pydantic import BaseModel
      {% if message_broker == "rabbitmq" %}
      import pika
      {% elif message_broker == "kafka" %}
      from kafka import KafkaConsumer, KafkaProducer
      {% elif message_broker == "redis" %}
      import redis
      {% endif %}

      app = FastAPI(title="{{ service_name }}")

      class Message(BaseModel):
          id: str
          type: str
          payload: dict

      @app.get("/health")
      async def health_check():
          return {"status": "healthy", "service": "{{ service_name }}"}

      @app.post("/process")
      async def process_message(message: Message):
          # Process message logic here
          return {"status": "processed", "id": message.id}

      if __name__ == "__main__":
          import uvicorn
          uvicorn.run(app, host="0.0.0.0", port=8000)

  - path: Dockerfile
    template: |
      {% if language == "python" %}
      FROM python:3.11-slim

      WORKDIR /app

      COPY requirements.txt .
      RUN pip install --no-cache-dir -r requirements.txt

      COPY src/ ./src/

      CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]
      {% elif language == "node" %}
      FROM node:18-alpine

      WORKDIR /app

      COPY package*.json ./
      RUN npm ci --only=production

      COPY src/ ./src/

      CMD ["node", "src/index.js"]
      {% elif language == "go" %}
      FROM golang:1.21 AS builder

      WORKDIR /app
      COPY go.* ./
      RUN go mod download

      COPY . .
      RUN go build -o service ./src

      FROM alpine:latest
      RUN apk --no-cache add ca-certificates
      WORKDIR /root/
      COPY --from=builder /app/service .

      CMD ["./service"]
      {% endif %}

ci_cd:
  github_actions:
    - name: Microservice CI/CD
      path: .github/workflows/microservice.yml
      template: |
        name: Microservice CI/CD

        on:
          push:
            branches: [main]
          pull_request:

        jobs:
          test:
            runs-on: ubuntu-latest
            steps:
              - uses: actions/checkout@v3
              {% if language == "python" %}
              - uses: actions/setup-python@v4
                with:
                  python-version: '3.11'

              - run: |
                  pip install -r requirements.txt
                  pytest tests/
              {% elif language == "node" %}
              - uses: actions/setup-node@v3
                with:
                  node-version: '18'

              - run: |
                  npm ci
                  npm test
              {% elif language == "go" %}
              - uses: actions/setup-go@v4
                with:
                  go-version: '1.21'

              - run: |
                  go test ./...
              {% endif %}
