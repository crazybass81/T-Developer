"""
Vulnerability Scanner - Security vulnerability detection and remediation
Size: < 6.5KB | Performance: < 3Î¼s
Day 29: Phase 2 - ServiceImproverAgent
"""

import ast
import re
from dataclasses import dataclass
from typing import Any, Dict, List, Optional, Set


@dataclass
class Vulnerability:
    """Security vulnerability"""
    
    type: str  # OWASP category
    severity: str  # critical, high, medium, low
    file: str
    line: int
    description: str
    cwe_id: str  # Common Weakness Enumeration
    remediation: str
    confidence: float  # 0-1


@dataclass
class SecurityReport:
    """Security scan report"""
    
    vulnerabilities: List[Vulnerability]
    risk_score: float  # 0-100
    compliance: Dict[str, bool]  # OWASP compliance
    recommendations: List[str]
    secure_code_suggestions: Dict[str, str]


class VulnerabilityScanner:
    """Scan for security vulnerabilities"""
    
    def __init__(self):
        self.owasp_patterns = self._init_owasp_patterns()
        self.cwe_mapping = self._init_cwe_mapping()
        
    def _init_owasp_patterns(self) -> Dict[str, List[re.Pattern]]:
        """Initialize OWASP Top 10 patterns"""
        return {
            "A01_broken_access": [
                re.compile(r"@app\.route.*methods=\['GET', 'POST'\](?!.*@login_required)"),
                re.compile(r"def\s+\w+\(.*request.*\):(?!.*auth|permission)"),
            ],
            "A02_crypto_failures": [
                re.compile(r"hashlib\.md5|hashlib\.sha1"),
                re.compile(r"DES\(|RC4\("),
                re.compile(r"password\s*=\s*['\"].*['\"]"),
            ],
            "A03_injection": [
                re.compile(r"\.format\(.*request\.|%\s.*request\."),
                re.compile(r"eval\(|exec\(|compile\("),
                re.compile(r"os\.system\(|subprocess.*shell=True"),
                re.compile(r"SELECT.*\+.*request\.|INSERT.*\+.*request\."),
            ],
            "A04_insecure_design": [
                re.compile(r"random\.random\(|random\.randint\("),
                re.compile(r"pickle\.loads?\(|marshal\.loads?\("),
            ],
            "A05_misconfig": [
                re.compile(r"DEBUG\s*=\s*True"),
                re.compile(r"app\.run\(.*debug=True"),
                re.compile(r"CORS\(.*origins=\['?\*'?\]"),
            ],
            "A06_vulnerable_components": [
                re.compile(r"requirements\.txt|package\.json"),  # Check for outdated
            ],
            "A07_auth_failures": [
                re.compile(r"if\s+password\s*==|if\s+user\.password\s*=="),
                re.compile(r"session\[.+\]\s*=(?!.*expire)"),
            ],
            "A08_data_integrity": [
                re.compile(r"verify\s*=\s*False"),
                re.compile(r"ssl\._create_unverified_context"),
            ],
            "A09_logging_failures": [
                re.compile(r"except.*:.*pass"),
                re.compile(r"print\(.*password|print\(.*token"),
            ],
            "A10_ssrf": [
                re.compile(r"requests\.get\(.*request\."),
                re.compile(r"urllib.*urlopen\(.*request\."),
            ],
        }
    
    def _init_cwe_mapping(self) -> Dict[str, str]:
        """Initialize CWE ID mapping"""
        return {
            "A01_broken_access": "CWE-284",
            "A02_crypto_failures": "CWE-327",
            "A03_injection": "CWE-89",
            "A04_insecure_design": "CWE-330",
            "A05_misconfig": "CWE-16",
            "A06_vulnerable_components": "CWE-1104",
            "A07_auth_failures": "CWE-287",
            "A08_data_integrity": "CWE-354",
            "A09_logging_failures": "CWE-778",
            "A10_ssrf": "CWE-918",
        }
    
    def scan(self, code: str, filename: str = "unknown.py") -> SecurityReport:
        """Scan code for vulnerabilities"""
        
        # Find vulnerabilities
        vulnerabilities = self._scan_patterns(code, filename)
        
        # AST-based analysis
        ast_vulns = self._scan_ast(code, filename)
        vulnerabilities.extend(ast_vulns)
        
        # Check dependencies
        dep_vulns = self._check_dependencies(code, filename)
        vulnerabilities.extend(dep_vulns)
        
        # Calculate risk score
        risk_score = self._calculate_risk_score(vulnerabilities)
        
        # Check compliance
        compliance = self._check_compliance(vulnerabilities)
        
        # Generate recommendations
        recommendations = self._generate_recommendations(vulnerabilities)
        
        # Generate secure code suggestions
        suggestions = self._generate_secure_code(vulnerabilities, code)
        
        return SecurityReport(
            vulnerabilities=vulnerabilities,
            risk_score=risk_score,
            compliance=compliance,
            recommendations=recommendations,
            secure_code_suggestions=suggestions
        )
    
    def _scan_patterns(self, code: str, filename: str) -> List[Vulnerability]:
        """Scan using regex patterns"""
        
        vulnerabilities = []
        lines = code.split('\n')
        
        for category, patterns in self.owasp_patterns.items():
            for pattern in patterns:
                for i, line in enumerate(lines, 1):
                    if pattern.search(line):
                        vuln = self._create_vulnerability(
                            category, filename, i, line
                        )
                        vulnerabilities.append(vuln)
        
        return vulnerabilities
    
    def _scan_ast(self, code: str, filename: str) -> List[Vulnerability]:
        """AST-based vulnerability scanning"""
        
        vulnerabilities = []
        
        try:
            tree = ast.parse(code)
        except SyntaxError:
            return vulnerabilities
        
        for node in ast.walk(tree):
            # Check for hardcoded secrets
            if isinstance(node, ast.Assign):
                for target in node.targets:
                    if isinstance(target, ast.Name):
                        if any(secret in target.id.lower() 
                              for secret in ['password', 'secret', 'token', 'api_key']):
                            if isinstance(node.value, ast.Constant):
                                vulnerabilities.append(
                                    Vulnerability(
                                        type="A02_crypto_failures",
                                        severity="high",
                                        file=filename,
                                        line=node.lineno,
                                        description="Hardcoded secret detected",
                                        cwe_id="CWE-798",
                                        remediation="Use environment variables",
                                        confidence=0.9
                                    )
                                )
            
            # Check for dangerous functions
            if isinstance(node, ast.Call):
                if isinstance(node.func, ast.Name):
                    if node.func.id in ['eval', 'exec', 'compile']:
                        vulnerabilities.append(
                            Vulnerability(
                                type="A03_injection",
                                severity="critical",
                                file=filename,
                                line=node.lineno,
                                description=f"Dangerous function {node.func.id}()",
                                cwe_id="CWE-95",
                                remediation="Avoid dynamic code execution",
                                confidence=1.0
                            )
                        )
        
        return vulnerabilities
    
    def _check_dependencies(self, code: str, filename: str) -> List[Vulnerability]:
        """Check for vulnerable dependencies"""
        
        vulnerabilities = []
        
        # Check imports for known vulnerable packages
        vulnerable_packages = {
            'requests': {'version': '<2.20.0', 'cve': 'CVE-2018-18074'},
            'flask': {'version': '<0.12.3', 'cve': 'CVE-2018-1000656'},
            'django': {'version': '<2.2.24', 'cve': 'CVE-2021-33203'},
        }
        
        imports = re.findall(r'import\s+(\w+)|from\s+(\w+)', code)
        for imp in imports:
            package = imp[0] or imp[1]
            if package in vulnerable_packages:
                vulnerabilities.append(
                    Vulnerability(
                        type="A06_vulnerable_components",
                        severity="high",
                        file=filename,
                        line=0,
                        description=f"Potentially vulnerable package: {package}",
                        cwe_id="CWE-1104",
                        remediation=f"Update {package} to latest version",
                        confidence=0.7
                    )
                )
        
        return vulnerabilities
    
    def _create_vulnerability(self, 
                            category: str,
                            filename: str,
                            line: int,
                            code_line: str) -> Vulnerability:
        """Create vulnerability from pattern match"""
        
        severity_map = {
            "A01_broken_access": "high",
            "A02_crypto_failures": "critical",
            "A03_injection": "critical",
            "A04_insecure_design": "medium",
            "A05_misconfig": "medium",
            "A06_vulnerable_components": "high",
            "A07_auth_failures": "high",
            "A08_data_integrity": "high",
            "A09_logging_failures": "low",
            "A10_ssrf": "high",
        }
        
        description_map = {
            "A01_broken_access": "Broken Access Control",
            "A02_crypto_failures": "Cryptographic Failure",
            "A03_injection": "Injection Vulnerability",
            "A04_insecure_design": "Insecure Design",
            "A05_misconfig": "Security Misconfiguration",
            "A06_vulnerable_components": "Vulnerable Component",
            "A07_auth_failures": "Authentication Failure",
            "A08_data_integrity": "Data Integrity Failure",
            "A09_logging_failures": "Logging/Monitoring Failure",
            "A10_ssrf": "Server-Side Request Forgery",
        }
        
        remediation_map = {
            "A01_broken_access": "Implement proper access controls",
            "A02_crypto_failures": "Use strong encryption",
            "A03_injection": "Use parameterized queries",
            "A04_insecure_design": "Follow secure design patterns",
            "A05_misconfig": "Review security configuration",
            "A06_vulnerable_components": "Update dependencies",
            "A07_auth_failures": "Implement secure authentication",
            "A08_data_integrity": "Verify data integrity",
            "A09_logging_failures": "Implement proper logging",
            "A10_ssrf": "Validate and sanitize URLs",
        }
        
        return Vulnerability(
            type=category,
            severity=severity_map.get(category, "medium"),
            file=filename,
            line=line,
            description=description_map.get(category, "Security Issue"),
            cwe_id=self.cwe_mapping.get(category, "CWE-000"),
            remediation=remediation_map.get(category, "Review security"),
            confidence=0.8
        )
    
    def _calculate_risk_score(self, vulnerabilities: List[Vulnerability]) -> float:
        """Calculate overall risk score"""
        
        if not vulnerabilities:
            return 0.0
        
        severity_weights = {
            "critical": 10,
            "high": 7,
            "medium": 4,
            "low": 1
        }
        
        total_score = sum(
            severity_weights.get(v.severity, 1) * v.confidence
            for v in vulnerabilities
        )
        
        # Normalize to 0-100
        max_possible = len(vulnerabilities) * 10
        return min(100, (total_score / max(1, max_possible)) * 100)
    
    def _check_compliance(self, vulnerabilities: List[Vulnerability]) -> Dict[str, bool]:
        """Check OWASP compliance"""
        
        owasp_categories = [
            "A01_broken_access", "A02_crypto_failures", "A03_injection",
            "A04_insecure_design", "A05_misconfig", "A06_vulnerable_components",
            "A07_auth_failures", "A08_data_integrity", "A09_logging_failures",
            "A10_ssrf"
        ]
        
        found_categories = set(v.type for v in vulnerabilities)
        
        return {
            category: category not in found_categories
            for category in owasp_categories
        }
    
    def _generate_recommendations(self, vulnerabilities: List[Vulnerability]) -> List[str]:
        """Generate security recommendations"""
        
        recommendations = []
        
        # Count by severity
        critical = sum(1 for v in vulnerabilities if v.severity == "critical")
        high = sum(1 for v in vulnerabilities if v.severity == "high")
        
        if critical > 0:
            recommendations.append(f"Fix {critical} critical vulnerabilities immediately")
        
        if high > 0:
            recommendations.append(f"Address {high} high-severity issues")
        
        # Type-specific recommendations
        vuln_types = set(v.type for v in vulnerabilities)
        
        if "A03_injection" in vuln_types:
            recommendations.append("Implement input validation and sanitization")
        
        if "A02_crypto_failures" in vuln_types:
            recommendations.append("Review cryptographic implementations")
        
        if "A06_vulnerable_components" in vuln_types:
            recommendations.append("Update all dependencies to latest versions")
        
        return recommendations[:5]
    
    def _generate_secure_code(self, 
                             vulnerabilities: List[Vulnerability],
                             code: str) -> Dict[str, str]:
        """Generate secure code suggestions"""
        
        suggestions = {}
        
        for vuln in vulnerabilities[:5]:  # Top 5 issues
            if vuln.type == "A03_injection" and "eval" in vuln.description:
                suggestions[f"Line {vuln.line}"] = "Use ast.literal_eval() instead"
            elif vuln.type == "A02_crypto_failures" and "md5" in code:
                suggestions[f"Line {vuln.line}"] = "Use hashlib.sha256() instead"
            elif vuln.type == "A02_crypto_failures" and "password" in vuln.description:
                suggestions[f"Line {vuln.line}"] = "Use os.environ.get('PASSWORD')"
        
        return suggestions
    
    def get_metrics(self) -> Dict[str, Any]:
        """Get scanner metrics"""
        return {
            "owasp_categories": len(self.owasp_patterns),
            "patterns_loaded": sum(len(p) for p in self.owasp_patterns.values()),
            "cwe_mappings": len(self.cwe_mapping)
        }


# Global instance
scanner = None


def get_scanner() -> VulnerabilityScanner:
    """Get or create scanner instance"""
    global scanner
    if not scanner:
        scanner = VulnerabilityScanner()
    return scanner


def main():
    """Test vulnerability scanner"""
    scanner = get_scanner()
    
    # Test code with vulnerabilities
    vulnerable_code = """
import os
import hashlib
import pickle

# A02: Hardcoded password
password = "admin123"
api_key = "sk-1234567890"

# A03: SQL Injection
def get_user(request):
    query = "SELECT * FROM users WHERE id = " + request.args.get('id')
    # execute query
    
# A03: Command injection
def run_command(user_input):
    os.system("echo " + user_input)
    
# A02: Weak crypto
def hash_password(pwd):
    return hashlib.md5(pwd.encode()).hexdigest()
    
# A03: Code injection
def evaluate(expr):
    return eval(expr)
    
# A04: Insecure randomness
import random
token = random.randint(1000, 9999)

# A09: Poor error handling
try:
    risky_operation()
except:
    pass
"""
    
    report = scanner.scan(vulnerable_code, "test.py")
    
    print(f"Security Scan Report:")
    print(f"  Risk Score: {report.risk_score:.1f}/100")
    print(f"  Vulnerabilities Found: {len(report.vulnerabilities)}")
    
    print("\nVulnerabilities:")
    for vuln in report.vulnerabilities:
        print(f"  [{vuln.severity.upper()}] Line {vuln.line}: {vuln.description}")
        print(f"    CWE: {vuln.cwe_id}")
        print(f"    Fix: {vuln.remediation}")
    
    print("\nOWASP Compliance:")
    for category, compliant in report.compliance.items():
        status = "â" if compliant else "â"
        print(f"  {category}: {status}")
    
    print("\nRecommendations:")
    for rec in report.recommendations:
        print(f"  - {rec}")


if __name__ == "__main__":
    main()