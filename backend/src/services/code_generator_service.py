"""
Production Code Generator Service
Ïã§Ï†ú ÏûëÎèôÌïòÎäî ÏΩîÎìúÎ•º ÏÉùÏÑ±ÌïòÎäî ÌîÑÎ°úÎçïÏÖò ÏÑúÎπÑÏä§
"""

import os
import json
from typing import Dict, Any, List, Optional
from pathlib import Path
import shutil
import zipfile
from datetime import datetime

class CodeGeneratorService:
    """ÌîÑÎ°úÎçïÏÖò ÏΩîÎìú ÏÉùÏÑ± ÏÑúÎπÑÏä§"""
    
    def __init__(self):
        self.templates_dir = Path(__file__).parent.parent / "templates"
        self.output_dir = Path("/tmp/generated_projects")
        self.output_dir.mkdir(parents=True, exist_ok=True)
    
    def generate_project(
        self,
        project_id: str,
        project_type: str,
        project_name: str,
        description: str,
        features: List[str]
    ) -> Dict[str, Any]:
        """
        Ïã§Ï†ú ÏûëÎèôÌïòÎäî ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±
        
        Args:
            project_id: ÌîÑÎ°úÏ†ùÌä∏ Í≥†Ïú† ID
            project_type: ÌîÑÎ°úÏ†ùÌä∏ ÌÉÄÏûÖ (react, vue, nextjs, etc.)
            project_name: ÌîÑÎ°úÏ†ùÌä∏ Ïù¥Î¶Ñ
            description: ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Î™Ö
            features: ÏöîÍµ¨ÎêòÎäî Í∏∞Îä• Î™©Î°ù
            
        Returns:
            ÏÉùÏÑ±Îêú ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ≥¥
        """
        project_path = self.output_dir / project_id
        project_path.mkdir(parents=True, exist_ok=True)
        
        # ÌîÑÎ°úÏ†ùÌä∏ ÌÉÄÏûÖÎ≥Ñ ÏÉùÏÑ±
        if project_type == "react":
            files = self._generate_react_project(project_name, description, features)
        elif project_type == "vue":
            files = self._generate_vue_project(project_name, description, features)
        elif project_type == "nextjs":
            files = self._generate_nextjs_project(project_name, description, features)
        elif project_type == "express":
            files = self._generate_express_project(project_name, description, features)
        elif project_type == "fastapi":
            files = self._generate_fastapi_project(project_name, description, features)
        else:
            # Í∏∞Î≥∏ Ïõπ ÌîÑÎ°úÏ†ùÌä∏
            files = self._generate_basic_web_project(project_name, description, features)
        
        # ÌååÏùº ÏÉùÏÑ±
        for file_path, content in files.items():
            full_path = project_path / file_path
            full_path.parent.mkdir(parents=True, exist_ok=True)
            full_path.write_text(content)
        
        # ZIP ÌååÏùº ÏÉùÏÑ±
        zip_path = self._create_zip(project_path, project_id)
        
        return {
            "project_id": project_id,
            "project_path": str(project_path),
            "zip_path": str(zip_path),
            "files_count": len(files),
            "project_type": project_type
        }
    
    def _generate_react_project(
        self,
        name: str,
        description: str,
        features: List[str]
    ) -> Dict[str, str]:
        """React ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ± - ÌîÑÎ°úÎçïÏÖò Î†àÎ≤®"""
        
        files = {}
        
        # package.json
        files["package.json"] = json.dumps({
            "name": name.lower().replace(" ", "-"),
            "version": "1.0.0",
            "description": description,
            "private": True,
            "dependencies": {
                "react": "^18.2.0",
                "react-dom": "^18.2.0",
                "react-router-dom": "^6.20.0",
                "axios": "^1.6.0"
            },
            "devDependencies": {
                "@types/react": "^18.2.0",
                "@types/react-dom": "^18.2.0",
                "@vitejs/plugin-react": "^4.2.0",
                "vite": "^5.0.0",
                "typescript": "^5.3.0",
                "eslint": "^8.55.0",
                "prettier": "^3.1.0"
            },
            "scripts": {
                "dev": "vite",
                "build": "vite build",
                "preview": "vite preview",
                "lint": "eslint src --ext ts,tsx",
                "format": "prettier --write src/**/*.{ts,tsx,css}"
            }
        }, indent=2)
        
        # tsconfig.json
        files["tsconfig.json"] = json.dumps({
            "compilerOptions": {
                "target": "ES2020",
                "lib": ["ES2020", "DOM", "DOM.Iterable"],
                "module": "ESNext",
                "skipLibCheck": True,
                "moduleResolution": "bundler",
                "allowImportingTsExtensions": True,
                "resolveJsonModule": True,
                "isolatedModules": True,
                "noEmit": True,
                "jsx": "react-jsx",
                "strict": True,
                "noUnusedLocals": True,
                "noUnusedParameters": True,
                "noFallthroughCasesInSwitch": True
            },
            "include": ["src"],
            "references": [{"path": "./tsconfig.node.json"}]
        }, indent=2)
        
        # vite.config.ts
        files["vite.config.ts"] = """import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    open: true
  },
  build: {
    outDir: 'dist',
    sourcemap: true
  }
})"""
        
        # index.html
        files["index.html"] = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{name}</title>
    <meta name="description" content="{description}">
</head>
<body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
</body>
</html>"""
        
        # src/main.tsx
        files["src/main.tsx"] = """import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)"""
        
        # src/App.tsx
        app_component = self._generate_react_app_component(name, features)
        files["src/App.tsx"] = app_component
        
        # src/index.css
        files["src/index.css"] = """* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
    Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}

.header {
  background: white;
  border-radius: 12px;
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.button {
  background: #667eea;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.button:hover {
  background: #5a67d8;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
}"""
        
        # Í∏∞Îä•Î≥Ñ Ïª¥Ìè¨ÎÑåÌä∏ ÏÉùÏÑ±
        if "authentication" in features or "auth" in features or "login" in features:
            files["src/components/Auth.tsx"] = self._generate_auth_component()
            
        if "database" in features or "data" in features:
            files["src/services/api.ts"] = self._generate_api_service()
            
        if "routing" in features or "navigation" in features:
            files["src/routes/Routes.tsx"] = self._generate_routes_component()
        
        # README.md
        files["README.md"] = f"""# {name}

{description}

## üöÄ ÏãúÏûëÌïòÍ∏∞

### ÌïÑÏàò ÏöîÍµ¨ÏÇ¨Ìï≠
- Node.js 18.0 Ïù¥ÏÉÅ
- npm ÎòêÎäî yarn

### ÏÑ§Ïπò Î∞è Ïã§Ìñâ

1. ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò:
```bash
npm install
```

2. Í∞úÎ∞ú ÏÑúÎ≤Ñ Ïã§Ìñâ:
```bash
npm run dev
```

3. ÌîÑÎ°úÎçïÏÖò ÎπåÎìú:
```bash
npm run build
```

## üìÅ ÌîÑÎ°úÏ†ùÌä∏ Íµ¨Ï°∞

```
{name}/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/    # React Ïª¥Ìè¨ÎÑåÌä∏
‚îÇ   ‚îú‚îÄ‚îÄ services/      # API Î∞è ÏÑúÎπÑÏä§
‚îÇ   ‚îú‚îÄ‚îÄ routes/        # ÎùºÏö∞ÌåÖ ÏÑ§Ï†ï
‚îÇ   ‚îú‚îÄ‚îÄ App.tsx        # Î©îÏù∏ Ïï± Ïª¥Ìè¨ÎÑåÌä∏
‚îÇ   ‚îî‚îÄ‚îÄ main.tsx       # ÏóîÌä∏Î¶¨ Ìè¨Ïù∏Ìä∏
‚îú‚îÄ‚îÄ public/            # Ï†ïÏ†Å ÌååÏùº
‚îú‚îÄ‚îÄ package.json       # ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ï
‚îî‚îÄ‚îÄ vite.config.ts     # Vite ÏÑ§Ï†ï
```

## üõ†Ô∏è Í∏∞Ïà† Ïä§ÌÉù
- React 18
- TypeScript
- Vite
- React Router
- Axios

## üìù ÎùºÏù¥ÏÑ†Ïä§
MIT
"""
        
        return files
    
    def _generate_react_app_component(self, name: str, features: List[str]) -> str:
        """React App Ïª¥Ìè¨ÎÑåÌä∏ ÏÉùÏÑ±"""
        
        imports = ["import React, { useState, useEffect } from 'react'"]
        
        if "routing" in features:
            imports.append("import { BrowserRouter as Router } from 'react-router-dom'")
        
        if "auth" in features or "authentication" in features:
            imports.append("import Auth from './components/Auth'")
        
        component_code = f"""
{chr(10).join(imports)}

interface AppState {{
  loading: boolean
  data: any[]
  user: any | null
}}

const App: React.FC = () => {{
  const [state, setState] = useState<AppState>({{
    loading: false,
    data: [],
    user: null
  }})

  useEffect(() => {{
    // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    loadInitialData()
  }}, [])

  const loadInitialData = async () => {{
    setState(prev => ({{ ...prev, loading: true }}))
    try {{
      // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Î°úÎìú Î°úÏßÅ
      await new Promise(resolve => setTimeout(resolve, 1000))
      setState(prev => ({{ 
        ...prev, 
        loading: false,
        data: []
      }}))
    }} catch (error) {{
      console.error('Failed to load data:', error)
      setState(prev => ({{ ...prev, loading: false }}))
    }}
  }}

  return (
    <div className="container">
      <header className="header">
        <h1>{name}</h1>
        <p>Production-ready React Application</p>
      </header>
      
      {{state.loading ? (
        <div className="loading">Loading...</div>
      ) : (
        <main className="main-content">
          <section className="features">
            <h2>Features</h2>
            <ul>
              {chr(10).join([f'<li>{feature}</li>' for feature in features])}
            </ul>
          </section>
          
          <section className="actions">
            <button className="button" onClick={{loadInitialData}}>
              Refresh Data
            </button>
          </section>
        </main>
      )}}
    </div>
  )
}}

export default App
"""
        return component_code.strip()
    
    def _generate_auth_component(self) -> str:
        """Ïù∏Ï¶ù Ïª¥Ìè¨ÎÑåÌä∏ ÏÉùÏÑ±"""
        return """import React, { useState } from 'react'

interface AuthProps {
  onLogin: (user: any) => void
}

const Auth: React.FC<AuthProps> = ({ onLogin }) => {
  const [isLogin, setIsLogin] = useState(true)
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError('')

    try {
      // Ïã§Ï†ú Ïù∏Ï¶ù Î°úÏßÅ
      const response = await fetch('/api/auth/' + (isLogin ? 'login' : 'register'), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password })
      })

      if (!response.ok) throw new Error('Authentication failed')
      
      const user = await response.json()
      onLogin(user)
    } catch (err) {
      setError(err.message || 'Authentication failed')
    }
  }

  return (
    <div className="auth-container">
      <form onSubmit={handleSubmit} className="auth-form">
        <h2>{isLogin ? 'Login' : 'Register'}</h2>
        
        {error && <div className="error">{error}</div>}
        
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        
        <button type="submit" className="button">
          {isLogin ? 'Login' : 'Register'}
        </button>
        
        <p onClick={() => setIsLogin(!isLogin)} className="toggle-auth">
          {isLogin ? 'Need an account? Register' : 'Have an account? Login'}
        </p>
      </form>
    </div>
  )
}

export default Auth"""
    
    def _generate_api_service(self) -> str:
        """API ÏÑúÎπÑÏä§ ÏÉùÏÑ±"""
        return """import axios from 'axios'

const API_BASE_URL = process.env.VITE_API_URL || 'http://localhost:8000'

const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json'
  }
})

// Request interceptor
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token')
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    return config
  },
  (error) => Promise.reject(error)
)

// Response interceptor
api.interceptors.response.use(
  (response) => response.data,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('token')
      window.location.href = '/login'
    }
    return Promise.reject(error)
  }
)

export const apiService = {
  // Auth
  login: (credentials: any) => api.post('/auth/login', credentials),
  register: (userData: any) => api.post('/auth/register', userData),
  logout: () => api.post('/auth/logout'),
  
  // Data
  getData: () => api.get('/data'),
  createData: (data: any) => api.post('/data', data),
  updateData: (id: string, data: any) => api.put(`/data/${id}`, data),
  deleteData: (id: string) => api.delete(`/data/${id}`)
}

export default api"""
    
    def _generate_routes_component(self) -> str:
        """ÎùºÏö∞ÌåÖ Ïª¥Ìè¨ÎÑåÌä∏ ÏÉùÏÑ±"""
        return """import React from 'react'
import { Routes, Route, Navigate } from 'react-router-dom'

// Import your page components here
const Home = () => <div>Home Page</div>
const About = () => <div>About Page</div>
const Dashboard = () => <div>Dashboard</div>
const NotFound = () => <div>404 - Page Not Found</div>

const AppRoutes: React.FC = () => {
  return (
    <Routes>
      <Route path="/" element={<Home />} />
      <Route path="/about" element={<About />} />
      <Route path="/dashboard" element={<Dashboard />} />
      <Route path="/404" element={<NotFound />} />
      <Route path="*" element={<Navigate to="/404" replace />} />
    </Routes>
  )
}

export default AppRoutes"""
    
    def _generate_vue_project(
        self,
        name: str,
        description: str,
        features: List[str]
    ) -> Dict[str, str]:
        """Vue ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±"""
        # Vue ÌîÑÎ°úÏ†ùÌä∏ Íµ¨ÌòÑ
        files = {}
        # ... Vue ÌîÑÎ°úÏ†ùÌä∏ ÌååÏùº ÏÉùÏÑ± Î°úÏßÅ
        return files
    
    def _generate_nextjs_project(
        self,
        name: str,
        description: str,
        features: List[str]
    ) -> Dict[str, str]:
        """Next.js ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±"""
        # Next.js ÌîÑÎ°úÏ†ùÌä∏ Íµ¨ÌòÑ
        files = {}
        # ... Next.js ÌîÑÎ°úÏ†ùÌä∏ ÌååÏùº ÏÉùÏÑ± Î°úÏßÅ
        return files
    
    def _generate_express_project(
        self,
        name: str,
        description: str,
        features: List[str]
    ) -> Dict[str, str]:
        """Express ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±"""
        # Express ÌîÑÎ°úÏ†ùÌä∏ Íµ¨ÌòÑ
        files = {}
        # ... Express ÌîÑÎ°úÏ†ùÌä∏ ÌååÏùº ÏÉùÏÑ± Î°úÏßÅ
        return files
    
    def _generate_fastapi_project(
        self,
        name: str,
        description: str,
        features: List[str]
    ) -> Dict[str, str]:
        """FastAPI ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±"""
        # FastAPI ÌîÑÎ°úÏ†ùÌä∏ Íµ¨ÌòÑ
        files = {}
        # ... FastAPI ÌîÑÎ°úÏ†ùÌä∏ ÌååÏùº ÏÉùÏÑ± Î°úÏßÅ
        return files
    
    def _generate_basic_web_project(
        self,
        name: str,
        description: str,
        features: List[str]
    ) -> Dict[str, str]:
        """Í∏∞Î≥∏ Ïõπ ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±"""
        files = {}
        
        # index.html
        files["index.html"] = f"""<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{name}</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div id="app">
        <header>
            <h1>{name}</h1>
            <p>{description}</p>
        </header>
        <main id="content">
            <!-- Dynamic content will be loaded here -->
        </main>
    </div>
    <script src="app.js"></script>
</body>
</html>"""
        
        # style.css
        files["style.css"] = """/* Production CSS */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: system-ui, -apple-system, sans-serif;
    line-height: 1.6;
    color: #333;
    background: #f5f5f5;
}

#app {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

header {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    margin-bottom: 2rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

main {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    min-height: 400px;
}"""
        
        # app.js
        files["app.js"] = """// Production JavaScript
class App {
    constructor() {
        this.init()
    }
    
    init() {
        console.log('App initialized')
        this.loadContent()
        this.setupEventListeners()
    }
    
    loadContent() {
        const content = document.getElementById('content')
        content.innerHTML = `
            <h2>Welcome to your new application</h2>
            <p>This is a production-ready web application.</p>
            <div class="features">
                <h3>Features:</h3>
                <ul>
                    ${this.getFeaturesList()}
                </ul>
            </div>
        `
    }
    
    getFeaturesList() {
        const features = """ + json.dumps(features) + """
        return features.map(f => `<li>${f}</li>`).join('')
    }
    
    setupEventListeners() {
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOM loaded')
        })
    }
}

// Initialize app
const app = new App()"""
        
        return files
    
    def _create_zip(self, project_path: Path, project_id: str) -> Path:
        """ÌîÑÎ°úÏ†ùÌä∏Î•º ZIP ÌååÏùºÎ°ú ÏïïÏ∂ï"""
        zip_path = self.output_dir / f"{project_id}.zip"
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for file_path in project_path.rglob('*'):
                if file_path.is_file():
                    arcname = file_path.relative_to(project_path)
                    zipf.write(file_path, arcname)
        
        return zip_path