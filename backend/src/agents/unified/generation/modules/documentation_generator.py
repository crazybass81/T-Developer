"""
Documentation Generator Module for Generation Agent
Generates comprehensive documentation for generated projects
"""

import asyncio
import json
import re
from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

import markdown
from markdown.extensions import codehilite, toc


class DocumentationType(Enum):
    README = "readme"
    API_DOCS = "api_docs"
    USER_GUIDE = "user_guide"
    DEVELOPER_GUIDE = "developer_guide"
    CHANGELOG = "changelog"
    CONTRIBUTING = "contributing"
    CODE_COMMENTS = "code_comments"
    ARCHITECTURE = "architecture"
    DEPLOYMENT = "deployment"
    TESTING = "testing"


@dataclass
class DocumentationFile:
    filename: str
    content: str
    doc_type: DocumentationType
    format: str  # markdown, html, rst, etc.
    description: str = ""
    auto_generated: bool = True


@dataclass
class DocumentationResult:
    success: bool
    documentation_files: Dict[str, DocumentationFile]
    total_docs: int
    processing_time: float
    metadata: Dict[str, Any]
    error: str = ""


class DocumentationGenerator:
    """Advanced documentation generator"""

    def __init__(self):
        self.version = "1.0.0"

        # Documentation templates
        self.doc_templates = {
            DocumentationType.README: self._generate_readme,
            DocumentationType.API_DOCS: self._generate_api_docs,
            DocumentationType.USER_GUIDE: self._generate_user_guide,
            DocumentationType.DEVELOPER_GUIDE: self._generate_developer_guide,
            DocumentationType.CHANGELOG: self._generate_changelog,
            DocumentationType.CONTRIBUTING: self._generate_contributing,
            DocumentationType.ARCHITECTURE: self._generate_architecture,
            DocumentationType.DEPLOYMENT: self._generate_deployment_docs,
            DocumentationType.TESTING: self._generate_testing_docs,
        }

        # Framework-specific documentation
        self.framework_docs = {
            "react": self._get_react_docs,
            "vue": self._get_vue_docs,
            "angular": self._get_angular_docs,
            "express": self._get_express_docs,
            "fastapi": self._get_fastapi_docs,
            "django": self._get_django_docs,
            "flask": self._get_flask_docs,
        }

    async def generate_documentation(
        self, context: Dict[str, Any], output_path: str
    ) -> DocumentationResult:
        """Generate comprehensive documentation"""

        start_time = datetime.now()

        try:
            framework = context.get("target_framework", "react")
            project_name = context.get("project_name", "Generated Project")

            documentation_files = {}

            # Generate core documentation
            for doc_type, generator in self.doc_templates.items():
                doc_file = await generator(context)
                if doc_file:
                    documentation_files[doc_file.filename] = doc_file

            # Generate framework-specific documentation
            if framework in self.framework_docs:
                framework_docs = await self.framework_docs[framework](context)
                documentation_files.update(framework_docs)

            # Generate code comments
            code_comments = await self._generate_code_comments(context)
            documentation_files.update(code_comments)

            # Write documentation files
            if output_path:
                await self._write_documentation_files(documentation_files, output_path)

            processing_time = (datetime.now() - start_time).total_seconds()

            return DocumentationResult(
                success=True,
                documentation_files=documentation_files,
                total_docs=len(documentation_files),
                processing_time=processing_time,
                metadata={
                    "framework": framework,
                    "project_name": project_name,
                    "docs_by_type": self._count_docs_by_type(documentation_files),
                },
            )

        except Exception as e:
            return DocumentationResult(
                success=False,
                documentation_files={},
                total_docs=0,
                processing_time=(datetime.now() - start_time).total_seconds(),
                metadata={},
                error=str(e),
            )

    async def _generate_readme(self, context: Dict[str, Any]) -> DocumentationFile:
        """Generate README.md file"""

        project_name = context.get("project_name", "Generated Project")
        framework = context.get("target_framework", "react")
        description = context.get(
            "project_description", f"A {framework} application generated by T-Developer"
        )
        components = context.get("selected_components", [])

        readme_content = f"""# {project_name}

{description}

## 🚀 Features

{self._generate_features_list(components, framework)}

## 📋 Prerequisites

{self._generate_prerequisites(framework)}

## 🛠️ Installation

{self._generate_installation_instructions(framework)}

## 🔧 Usage

{self._generate_usage_instructions(framework)}

## 📁 Project Structure

{self._generate_project_structure(framework)}

## 🧪 Testing

{self._generate_testing_section(framework)}

## 🚀 Deployment

{self._generate_deployment_section(framework)}

## 🤝 Contributing

Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- Generated using [T-Developer](https://github.com/t-developer-mvp)
- Built with {framework.title()}
- Documentation auto-generated on {datetime.now().strftime('%Y-%m-%d')}

## 📞 Support

If you have any questions or need help, please:
- Check the documentation in the `/docs` folder
- Open an issue on GitHub
- Contact the development team

---

*This project was automatically generated by T-Developer. For more information about T-Developer, visit our [GitHub repository](https://github.com/t-developer-mvp).*
"""

        return DocumentationFile(
            filename="README.md",
            content=readme_content,
            doc_type=DocumentationType.README,
            format="markdown",
            description="Project overview and setup instructions",
        )

    async def _generate_api_docs(self, context: Dict[str, Any]) -> Optional[DocumentationFile]:
        """Generate API documentation"""

        framework = context.get("target_framework", "react")

        # Only generate API docs for backend frameworks
        if framework not in ["express", "fastapi", "django", "flask"]:
            return None

        components = context.get("selected_components", [])
        api_components = [
            c for c in components if c.get("category") == "api" or "api" in c.get("type", "")
        ]

        api_docs = f"""# API Documentation

## Overview

This document describes the REST API endpoints for the {context.get('project_name', 'Generated Project')} application.

## Base URL

```
Development: http://localhost:{self._get_default_port(framework)}
Production: https://your-domain.com
```

## Authentication

{self._generate_auth_docs(framework)}

## Endpoints

{self._generate_endpoint_docs(api_components, framework)}

## Error Handling

{self._generate_error_docs(framework)}

## Rate Limiting

{self._generate_rate_limiting_docs()}

## Response Format

All API responses follow this standard format:

```json
{{
  "success": true,
  "data": {{}},
  "message": "Success message",
  "timestamp": "2024-01-01T12:00:00Z"
}}
```

## Status Codes

- `200` - Success
- `201` - Created
- `400` - Bad Request
- `401` - Unauthorized
- `403` - Forbidden
- `404` - Not Found
- `422` - Validation Error
- `500` - Internal Server Error
"""

        return DocumentationFile(
            filename="docs/API.md",
            content=api_docs,
            doc_type=DocumentationType.API_DOCS,
            format="markdown",
            description="API endpoints documentation",
        )

    async def _generate_user_guide(self, context: Dict[str, Any]) -> DocumentationFile:
        """Generate user guide"""

        framework = context.get("target_framework", "react")
        project_name = context.get("project_name", "Generated Project")

        user_guide = f"""# User Guide - {project_name}

## Introduction

Welcome to {project_name}! This guide will help you get started and make the most of the application.

## Getting Started

{self._generate_user_getting_started(framework)}

## Core Features

{self._generate_user_features_guide(context)}

## Common Tasks

{self._generate_common_tasks(context)}

## Troubleshooting

{self._generate_troubleshooting_section()}

## FAQ

{self._generate_faq_section()}
"""

        return DocumentationFile(
            filename="docs/USER_GUIDE.md",
            content=user_guide,
            doc_type=DocumentationType.USER_GUIDE,
            format="markdown",
            description="End user documentation",
        )

    async def _generate_developer_guide(self, context: Dict[str, Any]) -> DocumentationFile:
        """Generate developer guide"""

        framework = context.get("target_framework", "react")

        dev_guide = f"""# Developer Guide

## Architecture Overview

{self._generate_architecture_overview(framework)}

## Development Setup

{self._generate_dev_setup_instructions(framework)}

## Code Style Guidelines

{self._generate_code_style_guidelines(framework)}

## Component Development

{self._generate_component_development_guide(framework)}

## Testing Guidelines

{self._generate_testing_guidelines(framework)}

## Performance Best Practices

{self._generate_performance_guidelines(framework)}

## Security Considerations

{self._generate_security_guidelines(framework)}

## Deployment Pipeline

{self._generate_deployment_pipeline_docs(framework)}
"""

        return DocumentationFile(
            filename="docs/DEVELOPER_GUIDE.md",
            content=dev_guide,
            doc_type=DocumentationType.DEVELOPER_GUIDE,
            format="markdown",
            description="Developer documentation and best practices",
        )

    async def _generate_changelog(self, context: Dict[str, Any]) -> DocumentationFile:
        """Generate changelog"""

        changelog = f"""# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [1.0.0] - {datetime.now().strftime('%Y-%m-%d')}

### Added
- Initial project generation
- Core application structure
- Basic functionality implementation
- Automated testing setup
- Documentation generation
- CI/CD pipeline configuration

### Security
- Basic security headers configured
- Input validation implemented
- Authentication system setup

---

*This changelog is automatically maintained. For detailed commit history, see the Git log.*
"""

        return DocumentationFile(
            filename="CHANGELOG.md",
            content=changelog,
            doc_type=DocumentationType.CHANGELOG,
            format="markdown",
            description="Project change history",
        )

    async def _generate_contributing(self, context: Dict[str, Any]) -> DocumentationFile:
        """Generate contributing guide"""

        framework = context.get("target_framework", "react")

        contributing = f"""# Contributing to {context.get('project_name', 'Generated Project')}

Thank you for considering contributing to this project! Here's how you can help.

## Code of Conduct

This project and everyone participating in it is governed by our Code of Conduct. By participating, you are expected to uphold this code.

## How Can I Contribute?

### Reporting Bugs

Before creating bug reports, please check the existing issues as you might find that you don't need to create one.

#### Bug Report Template

- **Use a clear and descriptive title**
- **Describe the exact steps to reproduce the problem**
- **Provide specific examples**
- **Describe the behavior you observed and what you expected**
- **Include screenshots if applicable**

### Suggesting Enhancements

Enhancement suggestions are tracked as GitHub issues. Create an issue and provide:

- **Use a clear and descriptive title**
- **Provide a detailed description of the enhancement**
- **Explain why this enhancement would be useful**
- **List some examples of how the enhancement should work**

### Pull Requests

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes
4. Add tests for your changes
5. Ensure all tests pass
6. Commit your changes (`git commit -m 'Add amazing feature'`)
7. Push to the branch (`git push origin feature/amazing-feature`)
8. Open a Pull Request

## Development Process

{self._generate_development_process(framework)}

## Style Guidelines

{self._generate_style_guidelines(framework)}

## Testing Requirements

- Write tests for all new functionality
- Ensure existing tests still pass
- Maintain test coverage above 80%

## Commit Message Convention

Follow the [Conventional Commits](https://conventionalcommits.org/) specification:

```
type(scope): description

[optional body]

[optional footer(s)]
```

### Types
- `feat`: new feature
- `fix`: bug fix
- `docs`: documentation changes
- `style`: formatting changes
- `refactor`: code refactoring
- `test`: adding tests
- `chore`: maintenance tasks

## Review Process

All submissions require review. We use GitHub pull requests for this purpose.

## Community

- Join our discussions in GitHub Discussions
- Follow our social media channels
- Attend community meetings (schedule TBD)

Thank you for contributing! 🎉
"""

        return DocumentationFile(
            filename="CONTRIBUTING.md",
            content=contributing,
            doc_type=DocumentationType.CONTRIBUTING,
            format="markdown",
            description="Guidelines for contributing to the project",
        )

    async def _generate_architecture(self, context: Dict[str, Any]) -> DocumentationFile:
        """Generate architecture documentation"""

        framework = context.get("target_framework", "react")

        architecture = f"""# Architecture Documentation

## System Overview

This document describes the architecture of the {context.get('project_name', 'Generated Project')} application.

## High-Level Architecture

{self._generate_high_level_architecture(framework)}

## Component Architecture

{self._generate_component_architecture(framework, context)}

## Data Flow

{self._generate_data_flow_diagram(framework)}

## Technology Stack

{self._generate_tech_stack(framework, context)}

## Design Patterns

{self._generate_design_patterns(framework)}

## Security Architecture

{self._generate_security_architecture(framework)}

## Performance Considerations

{self._generate_performance_architecture(framework)}

## Scalability Design

{self._generate_scalability_design(framework)}
"""

        return DocumentationFile(
            filename="docs/ARCHITECTURE.md",
            content=architecture,
            doc_type=DocumentationType.ARCHITECTURE,
            format="markdown",
            description="System architecture documentation",
        )

    async def _generate_deployment_docs(self, context: Dict[str, Any]) -> DocumentationFile:
        """Generate deployment documentation"""

        framework = context.get("target_framework", "react")

        deployment = f"""# Deployment Guide

## Overview

This guide covers deploying the {context.get('project_name', 'Generated Project')} application.

## Prerequisites

{self._generate_deployment_prerequisites(framework)}

## Environment Variables

{self._generate_environment_variables_docs(framework)}

## Docker Deployment

{self._generate_docker_deployment_docs(framework)}

## Cloud Deployment

{self._generate_cloud_deployment_docs(framework)}

## Monitoring and Logging

{self._generate_monitoring_docs(framework)}

## Backup and Recovery

{self._generate_backup_docs(framework)}

## Troubleshooting

{self._generate_deployment_troubleshooting(framework)}
"""

        return DocumentationFile(
            filename="docs/DEPLOYMENT.md",
            content=deployment,
            doc_type=DocumentationType.DEPLOYMENT,
            format="markdown",
            description="Deployment instructions and configuration",
        )

    async def _generate_testing_docs(self, context: Dict[str, Any]) -> DocumentationFile:
        """Generate testing documentation"""

        framework = context.get("target_framework", "react")

        testing = f"""# Testing Guide

## Testing Strategy

{self._generate_testing_strategy(framework)}

## Running Tests

{self._generate_test_running_instructions(framework)}

## Writing Tests

{self._generate_test_writing_guidelines(framework)}

## Test Coverage

{self._generate_test_coverage_docs(framework)}

## Continuous Integration

{self._generate_ci_testing_docs()}

## Performance Testing

{self._generate_performance_testing_docs(framework)}
"""

        return DocumentationFile(
            filename="docs/TESTING.md",
            content=testing,
            doc_type=DocumentationType.TESTING,
            format="markdown",
            description="Testing guidelines and procedures",
        )

    async def _generate_code_comments(
        self, context: Dict[str, Any]
    ) -> Dict[str, DocumentationFile]:
        """Generate inline code comments documentation"""

        # This would analyze generated code files and create documentation
        # For now, return empty dict - would be implemented with AST parsing
        return {}

    # Helper methods for generating specific sections
    def _generate_features_list(self, components: List[Dict[str, Any]], framework: str) -> str:
        """Generate features list based on components"""

        features = []

        # Map components to user features
        component_features = {
            "authentication": "🔐 User authentication and authorization",
            "navigation": "🧭 Intuitive navigation system",
            "database": "💾 Data persistence and management",
            "api": "🔌 RESTful API endpoints",
            "ui": "🎨 Modern and responsive user interface",
            "form": "📝 Interactive forms and validation",
            "chart": "📊 Data visualization and analytics",
            "table": "📋 Data tables with sorting and filtering",
        }

        for component in components:
            category = component.get("category", "").lower()
            if category in component_features:
                features.append(component_features[category])

        # Add framework-specific features
        if framework in ["react", "vue", "angular"]:
            features.extend(
                [
                    "📱 Responsive design for all devices",
                    "⚡ Fast and efficient single-page application",
                    "🔄 Real-time updates and state management",
                ]
            )
        elif framework in ["express", "fastapi", "django", "flask"]:
            features.extend(
                [
                    "🚀 High-performance API server",
                    "🔒 Security-first architecture",
                    "📈 Scalable backend infrastructure",
                ]
            )

        return "\n".join(f"- {feature}" for feature in features[:10])  # Limit to 10 features

    def _generate_prerequisites(self, framework: str) -> str:
        """Generate prerequisites section"""

        prereqs = {
            "react": ["Node.js 18.x or higher", "npm or yarn package manager"],
            "vue": ["Node.js 18.x or higher", "npm or yarn package manager"],
            "angular": ["Node.js 18.x or higher", "Angular CLI", "npm package manager"],
            "express": ["Node.js 18.x or higher", "npm package manager"],
            "fastapi": ["Python 3.9+", "pip package manager"],
            "django": ["Python 3.9+", "pip package manager"],
            "flask": ["Python 3.9+", "pip package manager"],
        }

        framework_prereqs = prereqs.get(framework, ["Node.js 18.x or higher"])
        return "\n".join(f"- {prereq}" for prereq in framework_prereqs)

    def _generate_installation_instructions(self, framework: str) -> str:
        """Generate installation instructions"""

        if framework in ["react", "vue", "angular", "express"]:
            return """```bash
# Clone the repository
git clone <repository-url>
cd project-directory

# Install dependencies
npm install

# Start development server
npm run dev
```"""
        else:  # Python frameworks
            return """```bash
# Clone the repository
git clone <repository-url>
cd project-directory

# Create virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\\Scripts\\activate

# Install dependencies
pip install -r requirements.txt

# Run the application
python main.py
```"""

    def _get_default_port(self, framework: str) -> str:
        """Get default port for framework"""

        ports = {
            "react": "3000",
            "vue": "3000",
            "angular": "4200",
            "express": "3000",
            "fastapi": "8000",
            "django": "8000",
            "flask": "5000",
        }

        return ports.get(framework, "3000")

    # Additional helper methods (simplified for brevity)
    def _generate_usage_instructions(self, framework: str) -> str:
        return "Detailed usage instructions will be provided here."

    def _generate_project_structure(self, framework: str) -> str:
        return "Project structure documentation will be generated here."

    def _generate_testing_section(self, framework: str) -> str:
        return "Testing instructions will be provided here."

    def _generate_deployment_section(self, framework: str) -> str:
        return "Deployment instructions will be provided here."

    def _generate_auth_docs(self, framework: str) -> str:
        return "Authentication documentation will be provided here."

    def _generate_endpoint_docs(self, components: List[Dict[str, Any]], framework: str) -> str:
        return "API endpoint documentation will be generated here."

    def _generate_error_docs(self, framework: str) -> str:
        return "Error handling documentation will be provided here."

    def _generate_rate_limiting_docs(self) -> str:
        return "Rate limiting documentation will be provided here."

    # Framework-specific documentation generators (simplified)
    async def _get_react_docs(self, context: Dict[str, Any]) -> Dict[str, DocumentationFile]:
        return {}

    async def _get_vue_docs(self, context: Dict[str, Any]) -> Dict[str, DocumentationFile]:
        return {}

    async def _get_angular_docs(self, context: Dict[str, Any]) -> Dict[str, DocumentationFile]:
        return {}

    async def _get_express_docs(self, context: Dict[str, Any]) -> Dict[str, DocumentationFile]:
        return {}

    async def _get_fastapi_docs(self, context: Dict[str, Any]) -> Dict[str, DocumentationFile]:
        return {}

    async def _get_django_docs(self, context: Dict[str, Any]) -> Dict[str, DocumentationFile]:
        return {}

    async def _get_flask_docs(self, context: Dict[str, Any]) -> Dict[str, DocumentationFile]:
        return {}

    async def _write_documentation_files(
        self, documentation_files: Dict[str, DocumentationFile], output_path: str
    ):
        """Write documentation files to disk"""

        for filename, doc_file in documentation_files.items():
            file_path = Path(output_path) / filename

            # Create directory if it doesn't exist
            file_path.parent.mkdir(parents=True, exist_ok=True)

            # Write file content
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(doc_file.content)

    def _count_docs_by_type(
        self, documentation_files: Dict[str, DocumentationFile]
    ) -> Dict[str, int]:
        """Count documentation files by type"""

        counts = {}

        for doc_file in documentation_files.values():
            doc_type = doc_file.doc_type.value
            counts[doc_type] = counts.get(doc_type, 0) + 1

        return counts

    # Placeholder methods for complex documentation sections
    def _generate_user_getting_started(self, framework: str) -> str:
        return "User getting started guide will be generated here."

    def _generate_user_features_guide(self, context: Dict[str, Any]) -> str:
        return "User features guide will be generated here."

    def _generate_common_tasks(self, context: Dict[str, Any]) -> str:
        return "Common tasks documentation will be generated here."

    def _generate_troubleshooting_section(self) -> str:
        return "Troubleshooting documentation will be generated here."

    def _generate_faq_section(self) -> str:
        return "FAQ section will be generated here."

    def _generate_architecture_overview(self, framework: str) -> str:
        return "Architecture overview will be generated here."

    def _generate_dev_setup_instructions(self, framework: str) -> str:
        return "Development setup instructions will be generated here."

    def _generate_code_style_guidelines(self, framework: str) -> str:
        return "Code style guidelines will be generated here."

    def _generate_component_development_guide(self, framework: str) -> str:
        return "Component development guide will be generated here."

    def _generate_testing_guidelines(self, framework: str) -> str:
        return "Testing guidelines will be generated here."

    def _generate_performance_guidelines(self, framework: str) -> str:
        return "Performance guidelines will be generated here."

    def _generate_security_guidelines(self, framework: str) -> str:
        return "Security guidelines will be generated here."

    def _generate_deployment_pipeline_docs(self, framework: str) -> str:
        return "Deployment pipeline documentation will be generated here."

    def _generate_development_process(self, framework: str) -> str:
        return "Development process documentation will be generated here."

    def _generate_style_guidelines(self, framework: str) -> str:
        return "Style guidelines will be generated here."

    def _generate_high_level_architecture(self, framework: str) -> str:
        return "High-level architecture documentation will be generated here."

    def _generate_component_architecture(self, framework: str, context: Dict[str, Any]) -> str:
        return "Component architecture documentation will be generated here."

    def _generate_data_flow_diagram(self, framework: str) -> str:
        return "Data flow diagram will be generated here."

    def _generate_tech_stack(self, framework: str, context: Dict[str, Any]) -> str:
        return "Technology stack documentation will be generated here."

    def _generate_design_patterns(self, framework: str) -> str:
        return "Design patterns documentation will be generated here."

    def _generate_security_architecture(self, framework: str) -> str:
        return "Security architecture documentation will be generated here."

    def _generate_performance_architecture(self, framework: str) -> str:
        return "Performance architecture documentation will be generated here."

    def _generate_scalability_design(self, framework: str) -> str:
        return "Scalability design documentation will be generated here."

    def _generate_deployment_prerequisites(self, framework: str) -> str:
        return "Deployment prerequisites will be generated here."

    def _generate_environment_variables_docs(self, framework: str) -> str:
        return "Environment variables documentation will be generated here."

    def _generate_docker_deployment_docs(self, framework: str) -> str:
        return "Docker deployment documentation will be generated here."

    def _generate_cloud_deployment_docs(self, framework: str) -> str:
        return "Cloud deployment documentation will be generated here."

    def _generate_monitoring_docs(self, framework: str) -> str:
        return "Monitoring documentation will be generated here."

    def _generate_backup_docs(self, framework: str) -> str:
        return "Backup documentation will be generated here."

    def _generate_deployment_troubleshooting(self, framework: str) -> str:
        return "Deployment troubleshooting will be generated here."

    def _generate_testing_strategy(self, framework: str) -> str:
        return "Testing strategy will be generated here."

    def _generate_test_running_instructions(self, framework: str) -> str:
        return "Test running instructions will be generated here."

    def _generate_test_writing_guidelines(self, framework: str) -> str:
        return "Test writing guidelines will be generated here."

    def _generate_test_coverage_docs(self, framework: str) -> str:
        return "Test coverage documentation will be generated here."

    def _generate_ci_testing_docs(self) -> str:
        return "CI testing documentation will be generated here."

    def _generate_performance_testing_docs(self, framework: str) -> str:
        return "Performance testing documentation will be generated here."
