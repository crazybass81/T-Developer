"""
Simple API for T-Developer MVP
로컬 테스트용 간단한 API
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from pydantic import BaseModel
from typing import Optional, Dict, Any
import os
import json
import zipfile
from datetime import datetime
from pathlib import Path

app = FastAPI(
    title="T-Developer MVP API",
    description="AI-powered project generation from natural language",
    version="1.0.0"
)

# CORS 설정
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# 다운로드 경로
DOWNLOAD_PATH = Path("downloads")
DOWNLOAD_PATH.mkdir(exist_ok=True, parents=True)


class ProjectRequest(BaseModel):
    """프로젝트 생성 요청"""
    user_input: str
    project_name: Optional[str] = "untitled"


@app.get("/")
async def root():
    """API 루트"""
    return {
        "name": "T-Developer MVP API",
        "version": "1.0.0",
        "status": "active",
        "endpoints": {
            "generate": "/api/v1/generate",
            "download": "/api/v1/download/{project_id}",
            "health": "/health"
        }
    }


@app.get("/health")
async def health_check():
    """헬스 체크"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "service": "t-developer-api"
    }


@app.post("/api/v1/generate")
async def generate_project(request: ProjectRequest):
    """
    프로젝트 생성 (Mock)
    실제 구현이 준비될 때까지 모의 응답
    """
    project_id = f"project_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    # 샘플 프로젝트 생성
    project_path = DOWNLOAD_PATH / project_id
    project_path.mkdir(exist_ok=True)
    
    # 샘플 파일들 생성
    files = {
        "README.md": f"# {request.project_name}\n\nGenerated from: {request.user_input}\n",
        "package.json": json.dumps({
            "name": request.project_name,
            "version": "1.0.0",
            "description": request.user_input,
            "main": "index.js",
            "scripts": {
                "start": "node index.js",
                "dev": "nodemon index.js"
            }
        }, indent=2),
        "index.js": """// Generated by T-Developer
console.log('Hello from T-Developer!');

// Your project code here
""",
        ".gitignore": "node_modules/\n.env\n*.log\n"
    }
    
    for filename, content in files.items():
        file_path = project_path / filename
        file_path.write_text(content)
    
    # ZIP 파일 생성
    zip_path = DOWNLOAD_PATH / f"{project_id}.zip"
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for file_path in project_path.rglob('*'):
            if file_path.is_file():
                zipf.write(file_path, file_path.relative_to(project_path))
    
    return {
        "success": True,
        "project_id": project_id,
        "download_url": f"/api/v1/download/{project_id}",
        "message": "Project generated successfully (mock)",
        "files_created": list(files.keys())
    }


@app.get("/api/v1/download/{project_id}")
async def download_project(project_id: str):
    """
    프로젝트 다운로드
    """
    zip_path = DOWNLOAD_PATH / f"{project_id}.zip"
    
    if not zip_path.exists():
        raise HTTPException(status_code=404, detail="Project not found")
    
    return FileResponse(
        path=str(zip_path),
        media_type="application/zip",
        filename=f"{project_id}.zip",
        headers={
            "Content-Disposition": f"attachment; filename={project_id}.zip"
        }
    )


@app.get("/api/v1/agents")
async def list_agents():
    """에이전트 목록"""
    agents = [
        {"name": "NL Input", "status": "ready", "tasks": "4.1-4.10"},
        {"name": "UI Selection", "status": "ready", "tasks": "4.11-4.20"},
        {"name": "Parser", "status": "ready", "tasks": "4.21-4.30"},
        {"name": "Component Decision", "status": "ready", "tasks": "4.31-4.40"},
        {"name": "Match Rate", "status": "ready", "tasks": "4.41-4.50"},
        {"name": "Search", "status": "ready", "tasks": "4.51-4.60"},
        {"name": "Generation", "status": "ready", "tasks": "4.61-4.70"},
        {"name": "Assembly", "status": "ready", "tasks": "4.71-4.80"},
        {"name": "Download", "status": "ready", "tasks": "4.81-4.90"},
    ]
    return {"agents": agents, "total": len(agents)}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)