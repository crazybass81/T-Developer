generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  projects  Project[]
  agents    Agent[]
  sessions  Session[]

  @@map("users")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  agents      Agent[]
  tasks       Task[]

  @@map("projects")
}

model Agent {
  id          String   @id @default(uuid())
  name        String
  type        AgentType
  description String?
  config      Json
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  tasks       Task[]

  @@map("agents")
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    Int      @default(0)
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  agentId     String?
  agent       Agent?   @relation(fields: [agentId], references: [id])
  metadata    Json?
  result      Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?

  @@map("tasks")
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("sessions")
}

enum UserRole {
  ADMIN
  USER
  GUEST
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

enum AgentType {
  CODE_GENERATOR
  CODE_REVIEWER
  TEST_GENERATOR
  DOCUMENTATION
  DEPLOYMENT
  MONITORING
  SECURITY
  PERFORMANCE
  PROJECT_MANAGER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}