version: '3.8'

services:
  # Analysis Service Group (Light Agents)
  analysis-service:
    build:
      context: .
      dockerfile: Dockerfile.ecs
    container_name: t-developer-analysis
    environment:
      - AGENT_GROUP=ANALYSIS
      - AGENTS=nl_input,ui_selection,parser
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/t_developer
      - AWS_REGION=${AWS_REGION:-us-east-1}
    ports:
      - "8001:8000"
    depends_on:
      - redis
      - postgres
    networks:
      - t-developer-network
    volumes:
      - ./logs/analysis:/app/logs
      - shared-cache:/app/cache
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Decision Service Group (Medium Agents)
  decision-service:
    build:
      context: .
      dockerfile: Dockerfile.ecs
    container_name: t-developer-decision
    environment:
      - AGENT_GROUP=DECISION
      - AGENTS=component_decision,match_rate,search
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/t_developer
      - AWS_REGION=${AWS_REGION:-us-east-1}
    ports:
      - "8002:8000"
    depends_on:
      - redis
      - postgres
    networks:
      - t-developer-network
    volumes:
      - ./logs/decision:/app/logs
      - shared-cache:/app/cache
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Generation Service Group (Heavy Agents)
  generation-service:
    build:
      context: .
      dockerfile: Dockerfile.ecs
    container_name: t-developer-generation
    environment:
      - AGENT_GROUP=GENERATION
      - AGENTS=generation,assembly,download
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/t_developer
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - ENABLE_GPU=false
    ports:
      - "8003:8000"
    depends_on:
      - redis
      - postgres
    networks:
      - t-developer-network
    volumes:
      - ./logs/generation:/app/logs
      - ./generated:/app/generated
      - shared-cache:/app/cache
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # API Gateway / Orchestrator
  orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.ecs
    container_name: t-developer-orchestrator
    environment:
      - SERVICE_TYPE=ORCHESTRATOR
      - ANALYSIS_SERVICE_URL=http://analysis-service:8000
      - DECISION_SERVICE_URL=http://decision-service:8000
      - GENERATION_SERVICE_URL=http://generation-service:8000
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/t_developer
    ports:
      - "8000:8000"
    depends_on:
      - analysis-service
      - decision-service
      - generation-service
    networks:
      - t-developer-network
    volumes:
      - ./logs/orchestrator:/app/logs

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: t-developer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - t-developer-network
    command: redis-server --appendonly yes

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: t-developer-postgres
    environment:
      - POSTGRES_DB=t_developer
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - t-developer-network

  # Nginx Load Balancer (Optional for local testing)
  nginx:
    image: nginx:alpine
    container_name: t-developer-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - orchestrator
    networks:
      - t-developer-network

networks:
  t-developer-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  shared-cache:
    driver: local