name: Quality Gate

on:
  pull_request:
    branches: [main]

jobs:
  backend-quality:
    name: Backend Quality Gate
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          
      - name: Install dependencies
        run: |
          cd backend
          $HOME/.cargo/bin/uv pip install --system -r requirements.txt
          $HOME/.cargo/bin/uv pip install --system flake8 black isort pylint pytest pytest-cov
          
      - name: Code quality check - Black
        continue-on-error: true
        run: |
          cd backend
          black --check src/
          
      - name: Code quality check - isort
        continue-on-error: true
        run: |
          cd backend
          isort --check-only src/
          
      - name: Code quality check - Flake8
        continue-on-error: true
        run: |
          cd backend
          flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
          
      - name: Code quality check - Pylint
        continue-on-error: true
        run: |
          cd backend
          pylint src/ --fail-under=7.0
          
      - name: Test coverage check
        continue-on-error: true
        run: |
          cd backend
          python -m pytest tests/ --cov=src --cov-report=json --cov-report=term
          
      - name: Coverage threshold check
        continue-on-error: true
        run: |
          cd backend
          python -c "import json; data = json.load(open('coverage.json', 'r')); coverage = data.get('totals', {}).get('percent_covered', 0); print(f'Coverage: {coverage}%'); exit(0 if coverage >= 80 else 1)"
          
      - name: Security audit
        continue-on-error: true
        run: |
          cd backend
          $HOME/.cargo/bin/uv pip install --system safety
          safety check
          
      - name: Comment PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        continue-on-error: true
        with:
          script: |
            const comment = `
            ## 🔍 Backend Quality Gate Results
            
            ### Code Quality Checks
            - Black (formatting)
            - isort (import sorting)
            - Flake8 (linting)
            - Pylint (code quality)
            
            ### Test Coverage
            Coverage report available in artifacts
            
            ### Security
            Safety check completed
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
  
  frontend-quality:
    name: Frontend Quality Gate
    runs-on: ubuntu-latest
    if: ${{ hashFiles('frontend/package.json') != '' }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          
      - name: Check if frontend has package.json
        id: check_frontend
        run: |
          if [ -f "frontend/package.json" ]; then
            echo "has_package=true" >> $GITHUB_OUTPUT
          else
            echo "has_package=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Install dependencies
        if: steps.check_frontend.outputs.has_package == 'true'
        run: |
          cd frontend
          npm ci
          
      - name: Lint check
        if: steps.check_frontend.outputs.has_package == 'true'
        continue-on-error: true
        run: |
          cd frontend
          npm run lint || true
          
      - name: Type check
        if: steps.check_frontend.outputs.has_package == 'true'
        continue-on-error: true
        run: |
          cd frontend
          npm run type-check || true
          
      - name: Build check
        if: steps.check_frontend.outputs.has_package == 'true'
        continue-on-error: true
        run: |
          cd frontend
          npm run build