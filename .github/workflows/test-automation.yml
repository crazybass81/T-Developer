name: Automated Testing

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    services:
      dynamodb:
        image: amazon/dynamodb-local
        ports:
          - 8000:8000
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
      
      - name: Install dependencies
        run: |
          cd backend
          export PATH="$HOME/.cargo/bin:$PATH"
          # Remove PostgreSQL since we use DynamoDB
          sed -i '/psycopg2-binary/d' requirements.txt
          uv pip install --system -r requirements.txt
          uv pip install --system pytest pytest-cov pytest-asyncio pytest-mock boto3
      
      - name: Run tests
        run: |
          cd backend
          python -m pytest tests/test_simple.py -v --tb=short
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          DYNAMODB_ENDPOINT: http://localhost:8000
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          TESTING: true
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: us-east-1
      
      - name: Upload coverage
        if: matrix.python-version == '3.10'
        uses: codecov/codecov-action@v5
        continue-on-error: true
        with:
          directory: ./backend
          flags: backend

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if frontend exists
        id: check_frontend
        run: |
          if [ -f "frontend/package.json" ]; then
            echo "has_package=true" >> $GITHUB_OUTPUT
          else
            echo "has_package=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Node.js
        if: steps.check_frontend.outputs.has_package == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        if: steps.check_frontend.outputs.has_package == 'true'
        run: |
          cd frontend
          npm ci
      
      - name: Run tests
        if: steps.check_frontend.outputs.has_package == 'true'
        continue-on-error: true
        run: |
          cd frontend
          npm run test || true
      
      - name: Build check
        if: steps.check_frontend.outputs.has_package == 'true'
        continue-on-error: true
        run: |
          cd frontend
          npm run build

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    services:
      dynamodb:
        image: amazon/dynamodb-local
        ports:
          - 8000:8000
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
      
      - name: Install backend dependencies
        run: |
          cd backend
          export PATH="$HOME/.cargo/bin:$PATH"
          sed -i '/psycopg2-binary/d' requirements.txt
          uv pip install --system -r requirements.txt
      
      - name: Start backend server
        run: |
          cd backend
          python src/main_api.py &
          sleep 5
        env:
          TESTING: true
          DYNAMODB_ENDPOINT: http://localhost:8000
          REDIS_HOST: localhost
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: us-east-1
      
      - name: Test API endpoints
        run: |
          # Health check
          curl -f http://localhost:8000/health || exit 1
          
          # Test project generation endpoint
          curl -X POST http://localhost:8000/api/v1/generate \
            -H "Content-Type: application/json" \
            -d '{"name": "test", "description": "test project", "framework": "react"}' \
            -o response.json || true
          
          # Show response for debugging
          cat response.json || true