name: Automated Testing Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight

jobs:
  backend-tests:
    name: Backend Tests - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock
      
      - name: Run unit tests
        run: |
          cd backend
          python -m pytest tests/ -v --tb=short --cov=src --cov-report=xml
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          TESTING: true
      
      - name: Upload coverage reports
        if: matrix.python-version == '3.10'
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend
          files: ./coverage.xml
          flags: backend
          name: backend-coverage
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-py${{ matrix.python-version }}
          path: backend/coverage.xml
          retention-days: 7
  
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if frontend exists
        id: check_frontend
        run: |
          if [ -f "frontend/package.json" ]; then
            echo "has_package=true" >> $GITHUB_OUTPUT
          else
            echo "has_package=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Node.js
        if: steps.check_frontend.outputs.has_package == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        if: steps.check_frontend.outputs.has_package == 'true'
        run: |
          cd frontend
          npm ci
      
      - name: Run tests
        if: steps.check_frontend.outputs.has_package == 'true'
        continue-on-error: true
        run: |
          cd frontend
          npm run test || true
      
      - name: Run build
        if: steps.check_frontend.outputs.has_package == 'true'
        continue-on-error: true
        run: |
          cd frontend
          npm run build
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      
      - name: Start backend server
        run: |
          cd backend
          python src/main_api.py &
          sleep 5
        env:
          TESTING: true
          REDIS_HOST: localhost
      
      - name: Test API endpoints
        run: |
          # Health check
          curl -f http://localhost:8000/health || exit 1
          
          # Test project generation
          curl -X POST http://localhost:8000/api/v1/generate \
            -H "Content-Type: application/json" \
            -d '{"name": "test", "description": "test project", "framework": "react"}' \
            -o response.json
          
          # Check response
          python -c "import json; data = json.load(open('response.json')); assert data.get('success') == True"
      
      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: response.json
          retention-days: 7