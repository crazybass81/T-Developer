name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  AWS_REGION: 'us-east-1'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          
      - name: Install dependencies
        run: |
          cd backend
          export PATH="$HOME/.cargo/bin:$PATH"
          uv pip install --system flake8 black isort pylint
          
      - name: Run Black (formatter check)
        continue-on-error: true
        run: |
          cd backend
          black --check src/
          
      - name: Run isort (import sort check)
        continue-on-error: true
        run: |
          cd backend
          isort --check-only src/
          
      - name: Run Flake8
        continue-on-error: true
        run: |
          cd backend
          flake8 src/ --max-line-length=88 --extend-ignore=E203,W503

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      dynamodb:
        image: amazon/dynamodb-local
        ports:
          - 8000:8000
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          
      - name: Install dependencies
        run: |
          cd backend
          export PATH="$HOME/.cargo/bin:$PATH"
          uv pip install --system -r requirements.txt
          uv pip install --system pytest pytest-cov pytest-asyncio
          
      - name: Run unit tests
        continue-on-error: true
        run: |
          cd backend
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
        env:
          DYNAMODB_ENDPOINT: http://localhost:8000
          REDIS_HOST: localhost
          PYTHONPATH: /home/runner/work/T-DeveloperMVP/T-DeveloperMVP/backend
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          directory: ./backend
          files: ./coverage.xml
          flags: backend
          
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          
      - name: Install dependencies
        run: |
          cd backend
          export PATH="$HOME/.cargo/bin:$PATH"
          uv pip install --system safety bandit
          
      - name: Run Safety check
        continue-on-error: true
        run: |
          cd backend
          export PATH="$HOME/.cargo/bin:$PATH"
          uv pip install --system -r requirements.txt
          safety check
          
      - name: Run Bandit security scan
        continue-on-error: true
        run: |
          cd backend
          bandit -r src/ -ll
          
  build:
    name: Build and Validate
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          
      - name: Install dependencies
        run: |
          cd backend
          export PATH="$HOME/.cargo/bin:$PATH"
          uv pip install --system -r requirements.txt
          
      - name: Validate Python syntax
        run: |
          cd backend
          python -m py_compile src/**/*.py
          
      - name: Test API startup
        run: |
          cd backend
          timeout 10s python src/main_api.py || true
        env:
          TESTING: true